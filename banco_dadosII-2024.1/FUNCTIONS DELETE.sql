------------------------------------------------FUNCTIONS DELETE-----------------------------------------------------
CREATE OR REPLACE FUNCTION DELETE_CLIENTE(CPF_C VARCHAR(15)) 
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE CPF = CPF_C ) THEN
		RAISE EXCEPTION 'O CLIENTE DE CPF % NÃO EXISTE.', CPF_C;
	ELSE
		BEGIN 
			DELETE FROM CLIENTE WHERE CPF = CPF_C;
			RAISE INFO 'CLIENTE DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR O CLIENTE DE CPF %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTE CLIENTE.', CPF_C;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_CARGO(NOME_C VARCHAR(100))
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CARGO WHERE NOME ILIKE NOME_C ) THEN
		RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', NOME_C;
	ELSE
		BEGIN 
			DELETE FROM CARGO WHERE NOME ILIKE NOME_C;
			RAISE INFO 'CARGO DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR O CARGO %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTE CARGO.', NOME_C;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_LOJA(CNPJ_L VARCHAR(50))
RETURNS VOID AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM LOJA WHERE CNPJ ILIKE CNPJ_L ) THEN
		RAISE EXCEPTION 'A LOJA DE CNPJ % NÃO EXISTE.', CNPJ_L;
	ELSE
		BEGIN 
			DELETE FROM LOJA WHERE CNPJ ILIKE CNPJ_L;
			RAISE INFO 'LOJA DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR A LOJA DE CNPJ %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTA LOJA.', CNPJ_L;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_FUNCIONARIO(CPF_F VARCHAR(15))
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM FUNCIONARIO WHERE CPF ILIKE CPF_F ) THEN
		RAISE EXCEPTION 'O FUNCIONARIO DE CPF % NÃO EXISTE.', CPF_F;
	ELSE
		BEGIN 
			DELETE FROM FUNCIONARIO WHERE CPF ILIKE CPF_F;
			RAISE INFO 'FUNCIONARIO DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR O FUNCIONARIO DE CPF %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTE FUNCIONARIO.', CPF_F;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_PAGAMENTO(NOME_PAG VARCHAR(50))
RETURNS VOID AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM PAGAMENTO WHERE NOME ILIKE NOME_PAG ) THEN
		RAISE EXCEPTION 'O PAGAMENTO % NÃO EXISTE.', NOME_PAG;
	ELSE
		BEGIN 
			DELETE FROM PAGAMENTO WHERE NOME ILIKE NOME_PAG;
			RAISE INFO 'PAGAMENTO DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR O PAGAMENTO %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTE PAGAMENTO.', NOME_PAG;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_CATEGORIA(NOME_CAT VARCHAR(100))
RETURNS VOID AS $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM CATEGORIA WHERE NOME ILIKE NOME_CAT ) THEN
		RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.', NOME_CAT;
	ELSE
		BEGIN 
			DELETE FROM CATEGORIA WHERE NOME ILIKE NOME_CAT;
			RAISE INFO 'CATEGORIA DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR A CATEGORIA %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTA CATEGORIA.', NOME_CAT;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_PRODUTO(NOME_P VARCHAR(50))
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE NOME_P ) THEN
		RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', NOME_P;
	ELSE
		BEGIN 
			DELETE FROM PRODUTO WHERE NOME ILIKE NOME_P;
			RAISE INFO 'PRODUTO DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR O PRODUTO %. EXISTEM DADOS RELACIONADOS QUE DEPENDEM DESTE PRODUTO.', NOME_P;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DELETE_ESTOQUE(COD_E INT)--?? LOGICA DE EXCLUSAO
RETURNS VOID AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD = COD_E ) THEN
		RAISE EXCEPTION 'O ESTOQUE DE CÓDIGO % NÃO EXISTE.', COD_E;
	ELSE
		BEGIN 
			DELETE FROM ESTOQUE WHERE COD = COD_E;
			RAISE INFO 'ESTOQUE DELETADO COM SUCESSO.';
		EXCEPTION
			WHEN foreign_key_violation THEN
				RAISE EXCEPTION 'NÃO FOI POSSÍVEL EXCLUIR O ESTOQUE DE CÓDIGO %. CHAVE ESTRANGEIRA VIOLADA.', COD_E;
		END;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

----------------------------------------------FUNCAO DELETAR--------------------------------------------------

CREATE OR REPLACE FUNCTION DELETAR(TABELA VARCHAR(50), PARAMETRO VARCHAR(100))
RETURNS VOID AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		PERFORM DELETE_CLIENTE(PARAMETRO);
	ELSIF TABELA ILIKE 'CARGO' THEN
		PERFORM DELETE_CARGO(PARAMETRO);
	ELSIF TABELA ILIKE 'LOJA' THEN
		PERFORM DELETE_LOJA(PARAMETRO);
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		PERFORM DELETE_FUNCIONARIO(PARAMETRO);
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		PERFORM DELETE_PAGAMENTO(PARAMETRO);
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		PERFORM DELETE_CATEGORIA(PARAMETRO);
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		PERFORM DELETE_PRODUTO(PARAMETRO);
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		PERFORM DELETE_ESTOQUE(PARAMETRO);
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$  LANGUAGE PLPGSQL;
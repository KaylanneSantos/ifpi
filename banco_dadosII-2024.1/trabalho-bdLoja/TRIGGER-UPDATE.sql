----------------------------------------------------TRIGGER UPDATE-------------------------------------------------
CREATE OR REPLACE FUNCTION VERIFICAR_CLIENTE()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM CLIENTE WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME % JÁ ESTÁ EM USO POR OUTRO CLIENTE.', NEW.NOME;
        END IF;
    END IF;
	
    IF NEW.CPF IS NOT NULL THEN
        IF EXISTS (SELECT * FROM CLIENTE WHERE CPF = NEW.CPF AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O CPF % JÁ ESTÁ EM USO POR OUTRO CLIENTE.', NEW.CPF;
        END IF;
    END IF;

    IF NEW.EMAIL IS NOT NULL THEN
        IF EXISTS (SELECT * FROM CLIENTE WHERE EMAIL = NEW.EMAIL AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O EMAIL % JÁ ESTÁ EM USO POR OUTRO CLIENTE.', NEW.EMAIL;
        END IF;
    END IF;


    IF NEW.CONTATO IS NOT NULL THEN
        IF EXISTS (SELECT * FROM CLIENTE WHERE CONTATO = NEW.CONTATO AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O CONTATO % JÁ ESTÁ EM USO POR OUTRO CLIENTE.', NEW.CONTATO;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERIFICAR_CLIENTE
BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_CLIENTE();

CREATE OR REPLACE FUNCTION VERIFICAR_CARGO()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM CARGO WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME DO CARGO % JÁ ESTÁ EM USO POR OUTRO CARGO.', NEW.NOME;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERIFICAR_CARGO
BEFORE INSERT OR UPDATE ON CARGO
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_CARGO();

CREATE OR REPLACE FUNCTION VERIFICAR_LOJA()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM LOJA WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME % JÁ ESTÁ EM USO POR OUTRO LOJA.', NEW.NOME;
        END IF;
    END IF;

    IF NEW.CNPJ IS NOT NULL THEN
        IF EXISTS (SELECT * FROM LOJA WHERE CNPJ = NEW.CNPJ AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O CNPJ % JÁ ESTÁ EM USO POR OUTRO LOJA.', NEW.CNPJ;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERIFICAR_LOJA
BEFORE INSERT OR UPDATE ON LOJA
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_LOJA();

CREATE OR REPLACE FUNCTION VERIFICAR_FUNCIONARIO()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM FUNCIONARIO WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME % JÁ ESTÁ EM USO POR OUTRO FUNCIONÁRIO.', NEW.NOME;
        END IF;
    END IF;

    IF NEW.CPF IS NOT NULL THEN
        IF EXISTS (SELECT * FROM FUNCIONARIO WHERE CPF = NEW.CPF AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O CPF % JÁ ESTÁ EM USO POR OUTRO FUNCIONÁRIO.', NEW.CPF;
        END IF;
    END IF;

    IF NEW.CONTATO IS NOT NULL THEN
        IF EXISTS (SELECT * FROM FUNCIONARIO WHERE CONTATO = NEW.CONTATO AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O CONTATO % JÁ ESTÁ EM USO POR OUTRO FUNCIONÁRIO.', NEW.CONTATO;
        END IF;
    END IF;
	
    IF NEW.EMAIL IS NOT NULL THEN
        IF EXISTS (SELECT * FROM FUNCIONARIO WHERE EMAIL = NEW.EMAIL AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O EMAIL % JÁ ESTÁ EM USO POR OUTRO FUNCIONÁRIO.', NEW.EMAIL;
        END IF;
    END IF;

    IF NEW.COD_CARGO IS NOT NULL THEN
        IF NOT EXISTS (SELECT * FROM CARGO WHERE COD = NEW.COD_CARGO) THEN
            RAISE EXCEPTION 'O CARGO NÃO EXISTE.';
        END IF;
    END IF;

    IF NEW.COD_LOJA IS NOT NULL THEN
        IF NOT EXISTS (SELECT * FROM LOJA WHERE COD = NEW.COD_LOJA) THEN
            RAISE EXCEPTION 'A LOJA NÃO EXISTE.';
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERIFICAR_FUNCIONARIO
BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_FUNCIONARIO();

CREATE OR REPLACE FUNCTION VERIFICAR_PAGAMENTO()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM PAGAMENTO WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME DO PAGAMENTO % JÁ EXISTE.', NEW.NOME;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERIFICAR_PAGAMENTO
BEFORE INSERT OR UPDATE ON PAGAMENTO
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_PAGAMENTO();

CREATE OR REPLACE FUNCTION VERIFICAR_CATEGORIA()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM CATEGORIA WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME DA CATEGORIA % JÁ ESTÁ EM USO.', NEW.NOME;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERIFICAR_CATEGORIA
BEFORE INSERT OR UPDATE ON CATEGORIA
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_CATEGORIA();

CREATE OR REPLACE FUNCTION VERIFICAR_PRODUTO()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.NOME IS NOT NULL THEN
        IF EXISTS (SELECT * FROM PRODUTO WHERE NOME = NEW.NOME AND COD <> OLD.COD) THEN
            RAISE EXCEPTION 'O NOME DO PRODUTO % JÁ ESTÁ EM USO POR OUTRO PRODUTO.', NEW.NOME;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_VERFICAR_PRODUTO
BEFORE INSERT OR UPDATE ON PRODUTO
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_PRODUTO();
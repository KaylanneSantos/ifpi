--------------------------------------------CREATE DOMAIN-----------------------------------------------------
CREATE DOMAIN char_cargo AS TEXT;
CREATE DOMAIN char_produto AS TEXT;
CREATE DOMAIN char_estoque AS TEXT;

------------------------------------------------FUNCTIONS UPDATE-----------------------------------------------------
CREATE OR REPLACE FUNCTION UPDATE_CLIENTE(--DROP FUNCTION UPDATE_CLIENTE
	IDENTIFICADOR_C VARCHAR(100),
	NOME_C VARCHAR(100) DEFAULT NULL,
	CPF_C VARCHAR(15) DEFAULT NULL, 
	CONTATO_C VARCHAR(20) DEFAULT NULL, 
	EMAIL_C VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Cliente" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar
) AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE CPF ILIKE IDENTIFICADOR_C OR NOME ILIKE IDENTIFICADOR_C ) THEN
		RAISE EXCEPTION 'O CLIENTE % NÃO EXISTE.', IDENTIFICADOR_C;
	ELSE
		UPDATE CLIENTE SET
			NOME = COALESCE(NOME_C, NOME),
			CPF = COALESCE(CPF_C, CPF),
			CONTATO = COALESCE(CONTATO_C, CONTATO),
			EMAIL = COALESCE(EMAIL_C, EMAIL)
		WHERE CPF ILIKE IDENTIFICADOR_C OR NOME ILIKE IDENTIFICADOR_C;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO CLIENTE %.', IDENTIFICADOR_C;
		ELSE
			RAISE NOTICE 'CLIENTE ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
	
	RETURN QUERY
	SELECT cod, nome, cpf, contato, email FROM CLIENTE WHERE CPF ILIKE COALESCE(CPF_C, IDENTIFICADOR_C) OR NOME ILIKE COALESCE(NOME_C, IDENTIFICADOR_C);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_CARGO(--DROP FUNCTION UPDATE_CARGO
	IDENTIFICADOR_CAR VARCHAR(50),
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	SALARIO_CAR NUMERIC(8,2) DEFAULT NULL,
	COMISSAO_CAR NUMERIC(4,2) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Cargo" varchar,
	"Salário" numeric,
	"Comissão" numeric
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM CARGO WHERE NOME ILIKE IDENTIFICADOR_CAR) THEN 
		RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', IDENTIFICADOR_CAR;
	ELSE 
		UPDATE CARGO SET 
			NOME = COALESCE(NOME_CAR, NOME),
			SALARIO = COALESCE(SALARIO_CAR, SALARIO),
			COMISSAO = COALESCE(COMISSAO_CAR, COMISSAO)
		WHERE NOME ILIKE IDENTIFICADOR_CAR;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO CARGO %.', IDENTIFICADOR_CAR;
		ELSE
			RAISE NOTICE 'CARGO ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
	
	RETURN QUERY 
	SELECT cod, nome, salario, comissao FROM CARGO WHERE NOME ILIKE COALESCE(NOME_CAR, IDENTIFICADOR_CAR);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_LOJA(--DROP FUNCTION UPDATE_LOJA
	IDENTIFICADOR_L VARCHAR(50),
	NOME_L VARCHAR(20) DEFAULT NULL,
	CNPJ_L VARCHAR(18) DEFAULT NULL,
	ENDERECO_L TEXT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Loja" varchar,
	"Cnpj" varchar,
	"Endereco" text
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE IDENTIFICADOR_L) THEN
		RAISE EXCEPTION 'A % NÃO EXISTE.', IDENTIFICADOR_L;
	ELSE
		UPDATE LOJA SET 
			NOME = COALESCE(NOME_L,NOME),
			CNPJ = COALESCE(CNPJ_L, CNPJ),
			ENDERECO = COALESCE(ENDERECO_L, ENDERECO)
		WHERE NOME ILIKE IDENTIFICADOR_L;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DA %.', IDENTIFICADOR_NOME;
		ELSE
			RAISE NOTICE 'LOJA ATUALIZADA COM SUCESSO.';
		END IF;	
	END IF;
	
	RETURN QUERY 
		SELECT cod, nome, cnpj, endereco FROM LOJA WHERE NOME ILIKE COALESCE(NOME_L,IDENTIFICADOR_L);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_FUNCIONARIO( --DROP FUNCTION UPDATE_FUNCIONARIO
	IDENTIFICADOR_F VARCHAR(50),
	NOME_F VARCHAR(50) DEFAULT NULL,  
	CPF_F VARCHAR(50) DEFAULT NULL, 
	CONTATO_F VARCHAR(50) DEFAULT NULL, 
	EMAIL_F VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Funcionario" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar,
	"Cargo" varchar,
	"Loja" varchar	
) AS $$
DECLARE
	COD_CAR INT; 
	COD_LOJ INT;
BEGIN	
	IF NOT EXISTS(SELECT * FROM FUNCIONARIO WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F) THEN
		RAISE EXCEPTION 'O FUNCIONÁRIO % NÃO EXISTE.', IDENTIFICADOR_F;
	ELSE
	   	UPDATE FUNCIONARIO SET 
            NOME = COALESCE(NOME_F, NOME),
			CPF = COALESCE(CPF_F, CPF),
            CONTATO = COALESCE(CONTATO_F, CONTATO),
            EMAIL = COALESCE(EMAIL_F, EMAIL),
            COD_CARGO = COALESCE((SELECT COD FROM CARGO WHERE NOME ILIKE NOME_CAR), COD_CARGO),
            COD_LOJA = COALESCE((SELECT COD FROM LOJA WHERE NOME ILIKE NOME_LOJ), COD_LOJA)
        WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO FUNCIONÁRIO % ', IDENTIFICADOR_F;
        ELSE
            RAISE NOTICE 'FUNCIONÁRIO ATUALIZADO COM SUCESSO.';
        END IF;
	END IF;
	
	RETURN QUERY 
		SELECT f.cod, f.nome, cpf, contato, email, c.nome, l.nome FROM FUNCIONARIO F 
			JOIN CARGO C ON C.COD = F.COD_CARGO 
			JOIN LOJA L ON L.COD = F.COD_LOJA 
		WHERE CPF ILIKE COALESCE(CPF_F,IDENTIFICADOR_F) OR F.NOME ILIKE COALESCE(NOME_F,IDENTIFICADOR_F);	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_PAGAMENTO(--DROP FUNCTION UPDATE_PAGAMENTO
	IDENTIFICADOR_PAG VARCHAR(50),
	NOME_PAG VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Tipo Pagamento" varchar
) AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM PAGAMENTO WHERE NOME = IDENTIFICADOR_PAG) THEN
		RAISE EXCEPTION 'O TIPO DE PAGAMENTO % NÃO EXISTE.', IDENTIFICADOR_PAG;
	ELSE 
		UPDATE PAGAMENTO SET NOME = NOME_PAG WHERE NOME ILIKE IDENTIFICADOR_PAG;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO PAGAMENTO %', IDENTIFICADOR_PAG;
		END IF;
	
		RAISE NOTICE 'PAGAMENTO ATUALIZADO COM SUCESSO.';
	END IF;

	RETURN QUERY
		SELECT cod, nome FROM PAGAMENTO WHERE NOME ILIKE COALESCE(NOME_PAG,IDENTIFICADOR_PAG);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_CATEGORIA(--DROP FUNCTION UPDATE_CATEGORIA
	IDENTIFICADOR_C VARCHAR(50),
	NOME_C VARCHAR(50) DEFAULT NULL, 
	DESC_C TEXT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Categoria" varchar,
	"Descrição" text
) AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM CATEGORIA WHERE NOME ILIKE IDENTIFICADOR_C) THEN
		RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.', IDENTIFICADOR_C;
	ELSE
		UPDATE CATEGORIA SET 
			NOME = COALESCE(NOME_C, NOME),
			DESCRICAO = COALESCE(DESC_C, DESCRICAO)
		WHERE NOME ILIKE IDENTIFICADOR_C;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DA CATEGORIA %', IDENTIFICADOR_C;
		END IF;
	
		RAISE NOTICE 'CATEGORIA ATUALIZADA COM SUCESSO.';
	END IF;
	
	RETURN QUERY
		SELECT cod, nome, descricao FROM CATEGORIA WHERE NOME ILIKE COALESCE(NOME_C,IDENTIFICADOR_C);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_PRODUTO( --DROP FUNCTION UPDATE_PRODUTO
	IDENTIFICADOR_P VARCHAR(100),
	NOME_P VARCHAR(50) DEFAULT NULL, 
	NOME_CAT VARCHAR(50) DEFAULT NULL,
	VALOR_P NUMERIC(8,2) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Categoria" varchar,
	"Valor Unitário" numeric
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE IDENTIFICADOR_P) THEN
		RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', IDENTIFICADOR_P;	
	ELSE 
		UPDATE PRODUTO SET 
			NOME = COALESCE(NOME_P,NOME),
			VALOR_UNITARIO = COALESCE(VALOR_P, VALOR_UNITARIO),
			COD_CATEGORIA = COALESCE((SELECT COD FROM CATEGORIA WHERE NOME ILIKE NOME_CAT), COD_CATEGORIA)
		WHERE NOME ILIKE IDENTIFICADOR_P;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO PRODUTO % ', IDENTIFICADOR_P;
		ELSE
			RAISE NOTICE 'PRODUTO ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;

	RETURN QUERY 
		SELECT p.cod, p.nome, c.nome, valor_unitario FROM PRODUTO P
			JOIN CATEGORIA C ON C.COD = P.COD_CATEGORIA
		WHERE P.NOME ILIKE COALESCE(NOME_P,IDENTIFICADOR_P);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_ESTOQUE( --DROP FUNCTION UPDATE_ESTOQUE
	IDENTIFICADOR_E VARCHAR(100),
	NOME_P VARCHAR(50) DEFAULT NULL, 
	NOME_L VARCHAR(20) DEFAULT NULL,
	QUANT INT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int
) AS $$
DECLARE
	COD_PROD INT;
	COD_LOJ INT;
	NOME_PROD VARCHAR;
	NOME_LOJ VARCHAR;
	COD_E INT;
BEGIN
	SELECT COD, NOME INTO COD_PROD, NOME_PROD FROM PRODUTO WHERE NOME ILIKE SPLIT_PART(IDENTIFICADOR_E,'-',1);
	SELECT COD, NOME INTO COD_LOJ, NOME_LOJ FROM LOJA WHERE NOME ILIKE SPLIT_PART(IDENTIFICADOR_E,'-',2);

	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
	
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD = COD_E) THEN  
		RAISE EXCEPTION 'O ESTOQUE DO PRODUTO E LOJA INFORMADO NÃO EXISTE.';
	ELSE
		UPDATE ESTOQUE SET 
			COD_PRODUTO = COALESCE((SELECT COD FROM PRODUTO WHERE NOME ILIKE NOME_P), COD_PRODUTO),
			COD_LOJA = COALESCE((SELECT COD FROM LOJA WHERE NOME ILIKE NOME_L), COD_LOJA),
			QUANTIDADE = COALESCE(QUANT, QUANTIDADE)
		WHERE COD = COD_E;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO PRODUTO % e %', NOME_PROD, NOME_LOJ;
		ELSE
			RAISE NOTICE 'ESTOQUE ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
	
	RETURN QUERY 
		SELECT e.cod, p.nome, l.nome, quantidade FROM ESTOQUE E 
			JOIN PRODUTO P ON P.COD = E.COD_PRODUTO
			JOIN LOJA L ON L.COD = E.COD_LOJA
		WHERE E.COD = COD_E;
END;
$$ LANGUAGE PLPGSQL;

---------------------------------------------FUNCÃO ALTERAR----------------------------------------------------------

CREATE OR REPLACE FUNCTION ALTERAR(--CARGO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR,NUMERIC,NUMERIC,float)
	TABELA char_cargo, --TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	CARGO VARCHAR(50), 
	SALARIO NUMERIC(8,2),
	COMISSAO NUMERIC(4,2))
RETURNS TABLE(
	"id°" int,
	"Cargo" varchar,
	"Salário" numeric,
	"Comissão" numeric	
) AS $$
BEGIN 
	IF TABELA ILIKE 'CARGO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_CARGO(IDENTIFICADOR::varchar(50), CARGO, SALARIO, COMISSAO);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--LOJA DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,NUMERIC,NUMERIC)
	TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	LOJA VARCHAR(50),
	CNPJ VARCHAR(18),
	ENDERECO TEXT)
RETURNS TABLE(
	"id°" int,
	"Loja" varchar,
	"Cnpj" varchar,
	"Endereco" text	
) AS $$
BEGIN
	IF TABELA ILIKE 'LOJA' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY 
			SELECT * FROM UPDATE_LOJA(IDENTIFICADOR, LOJA, CNPJ, ENDERECO);
		ELSE 
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE .';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PAGAMENTO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR,extra)
	TABELA VARCHAR(9),
	IDENTIFICADOR VARCHAR(50),
	PAGAMENTO VARCHAR(50))
RETURNS TABLE(
	"id°" int,
	"Tipo Pagamento" varchar	
) AS $$
BEGIN
	IF TABELA ILIKE 'PAGAMENTO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_PAGAMENTO(IDENTIFICADOR, PAGAMENTO);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CATEGORIA DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,TEXT)
	TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	CATEGORIA VARCHAR(50), 
	DESCRICAO TEXT)
RETURNS TABLE(
	"id°" int,
	"Categoria" varchar,
	"Descrição" text	
) AS $$
BEGIN 
	IF TABELA ILIKE 'CATEGORIA' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_CATEGORIA(IDENTIFICADOR, CATEGORIA, DESCRICAO);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CLIENTE DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,extra)
	TABELA VARCHAR(7),
	IDENTIFICADOR VARCHAR(100), 
	CLIENTE VARCHAR(100), 
	CPF VARCHAR(15),
	CONTATO VARCHAR(20), 
	EMAIL VARCHAR(50))
RETURNS TABLE(
	"id°" int,
	"Cliente" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_CLIENTE(IDENTIFICADOR,CLIENTE,CPF,CONTATO,EMAIL);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--FUNCIONARIO DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,extra)
	TABELA VARCHAR(50), 
	IDENTIFICADOR VARCHAR(100), 
	FUNCIONARIO VARCHAR(100),
	CPF VARCHAR(15),
	CONTATO VARCHAR(20), 
	EMAIL VARCHAR(50),
	NOME_CAR VARCHAR(50), 
	NOME_LOJ VARCHAR(20))
RETURNS TABLE(
	"id°" int,
	"Funcionario" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar,
	"Cargo" varchar,
	"Loja" varchar	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'FUNCIONARIO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_FUNCIONARIO(IDENTIFICADOR,FUNCIONARIO,CPF,CONTATO,EMAIL,NOME_CAR,NOME_LOJ);
		ELSE 
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PRODUTO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR,VARCHAR,NUMERIC)
	TABELA char_produto, --TABELA VARCHAR(7),
	IDENTIFICADOR VARCHAR(100),
	PRODUTO VARCHAR(50),
	CATEGORIA VARCHAR(50),
	VALOR NUMERIC(8,2))
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Categoria" varchar,
	"Valor Unitário" numeric
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'PRODUTO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_PRODUTO(IDENTIFICADOR::varchar(15), PRODUTO, CATEGORIA, VALOR);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--ESTOQUE DROP FUNCTION ALTERAR(varchar,varchar,VARCHAR,VARCHAR,INT,extra)
	TABELA char_estoque, --TABELA VARCHAR(50), 
	IDENTIFICADOR VARCHAR(100),
	PRODUTO VARCHAR(50), 
	LOJA VARCHAR(50),
	QUANTIDADE INT)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'ESTOQUE' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_ESTOQUE(IDENTIFICADOR::VARCHAR(50),PRODUTO,LOJA,QUANTIDADE);
		ELSE 
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
select * from estoque
select * from produto
select * from alterar('estoque','Sapato Social Masculino-Loja 2', null,'Loja 1', null)
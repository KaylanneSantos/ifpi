-------------------------------------------TRIGGER CONTROLE DE ESTOQUE---------------------------------------------------

CREATE OR REPLACE FUNCTION CONTROLE_ESTOQUE()
RETURNS TRIGGER AS $$
DECLARE
	QUANT_E INT;
	OLD_QUANT INT := COALESCE(OLD.QUANTIDADE, 0);
	QUANT_RESTANTE INT;
BEGIN
	SELECT QUANTIDADE INTO QUANT_E FROM ESTOQUE WHERE COD = NEW.COD_ESTOQUE;
	SELECT QUANTIDADE INTO OLD_QUANT FROM ITEM_PEDIDO WHERE COD = OLD.COD;

    IF TG_OP = 'INSERT' THEN	
        IF QUANT_E >= NEW.QUANTIDADE AND QUANT_E - NEW.QUANTIDADE >= 5 THEN
            -- Atualiza a quantidade no estoque
            UPDATE ESTOQUE SET
                QUANTIDADE = QUANT_E - NEW.QUANTIDADE
            WHERE COD = NEW.COD_ESTOQUE;
            
            -- Verifica a quantidade restante
            SELECT QUANTIDADE INTO QUANT_RESTANTE FROM ESTOQUE WHERE COD = NEW.COD_ESTOQUE;
            IF QUANT_RESTANTE <= 10 THEN
                RAISE INFO 'ATENÇÃO: Quantidade em estoque insuficiente, apenas % unidades restantes.', QUANT_RESTANTE;
            END IF;

        ELSE
            RAISE EXCEPTION 'QUANTIDADE EM ESTOQUE INSUFICIENTE.';
        END IF;

    ELSEIF TG_OP = 'UPDATE' THEN
        IF QUANT_E + OLD_QUANT >= NEW.QUANTIDADE AND (QUANT_E + OLD_QUANT) - NEW.QUANTIDADE >= 5  THEN
            -- Atualiza a quantidade no estoque
            UPDATE ESTOQUE SET
                QUANTIDADE = QUANT_E + OLD_QUANT - NEW.QUANTIDADE
            WHERE COD = NEW.COD_ESTOQUE;
            
            -- Verifica a quantidade restante
            SELECT QUANTIDADE INTO QUANT_RESTANTE FROM ESTOQUE WHERE COD = NEW.COD_ESTOQUE;
            IF QUANT_RESTANTE <= 10 THEN
                RAISE INFO 'ATENÇÃO: Quantidade em estoque insuficiente, apenas % unidades restantes.', QUANT_RESTANTE;
            END IF;

        ELSE
            RAISE EXCEPTION 'QUANTIDADE EM ESTOQUE INSUFICIENTE.';
        END IF;
    END IF; 	
		
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TG_CONTROLE_ESTOQUE
BEFORE INSERT OR UPDATE ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE FUNCTION CONTROLE_ESTOQUE();

---------------------------------------------------NOTA FISCAL-----------------------------------------------------------

CREATE OR REPLACE FUNCTION NOTA_FISCAL(COD_P INT) --DROP FUNCTION NOTA_FISCAL
RETURNS TABLE (
	"n°Pedido" VARCHAR, 
	Cliente VARCHAR(100), 
	Produto VARCHAR(100), 
	Valor NUMERIC(8,2), 
	Quantidade INT, 
	Total NUMERIC(8,2), 
	Data VARCHAR(10), 
	Hora VARCHAR(8), 
	Funcionario VARCHAR(100), 
	Pago TEXT) AS $$
BEGIN
	RETURN QUERY
		SELECT 
			(PDD.COD)::VARCHAR "n°Pedido", 
			C.NOME Cliente, 
			P.NOME Produto, 
			P.VALOR_UNITARIO Valor, 
			IP.QUANTIDADE Quantidade, 
			(P.VALOR_UNITARIO * IP.QUANTIDADE) Total, 
			(TO_CHAR(PDD.DATA_HORA, 'DD-MM-YYYY'))::VARCHAR(10) Data, 
			(TO_CHAR(PDD.DATA_HORA, 'HH24:MI:SS'))::VARCHAR(8) Hora,
			F.NOME Funcionario,
			CASE 
				WHEN PDD.PAGO THEN 'Pago'
				ELSE 'A pagar'
			END AS PAGAMENTO
		FROM PEDIDO PDD 
			JOIN ITEM_PEDIDO IP ON IP.COD_PEDIDO = PDD.COD 
			JOIN ESTOQUE E ON E.COD = IP.COD_ESTOQUE 
			JOIN CLIENTE C ON C.COD = PDD.COD_CLIENTE 
			JOIN PRODUTO P ON P.COD = E.COD_PRODUTO 
			JOIN FUNCIONARIO F ON F.COD = PDD.COD_FUNCIONARIO
		WHERE PDD.COD = COD_P ORDER BY PDD.COD DESC;
END;
$$ LANGUAGE PLPGSQL;

--------------------------------------------------CRIAR PEDIDO--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION ADD_PEDIDO(--DROP FUNCTION ADD_PEDIDO
	IDENTIFICADOR_C VARCHAR(100),
	NOME_P VARCHAR(50), 
	QUANT_V INT, 
	NOME_PAG VARCHAR(50), 
	IDENTIFICADOR_F VARCHAR(100),
	QUANT_PARCELA INT DEFAULT 0)
RETURNS VARCHAR AS $$
DECLARE
	COD_C INT;
	COD_F INT;
	COD_P INT;
	COD_PAG INT;
	COD_PDD INT;
	COD_L INT;
	NOME_L VARCHAR;
	COD_E INT;
	QUANT_E INT;
	VALOR_UNIT NUMERIC(8,2);
	VALOR_P NUMERIC(8,2);
	
	QTDD_P INT;
	MESSAGE VARCHAR;
	VALOR_TT_IT NUMERIC(8,2);
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE NOME ILIKE IDENTIFICADOR_C OR CPF ILIKE IDENTIFICADOR_C;
	SELECT COD INTO COD_F FROM FUNCIONARIO WHERE NOME ILIKE IDENTIFICADOR_F OR CPF ILIKE IDENTIFICADOR_F;
	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_P;	
	SELECT COD INTO COD_PAG FROM PAGAMENTO WHERE NOME ILIKE NOME_PAG;
	
	SELECT P.COD INTO COD_PDD FROM PEDIDO P JOIN CLIENTE C ON C.COD = P.COD_CLIENTE WHERE P.COD_CLIENTE = COD_C AND PAGO = FALSE;
	SELECT L.COD, L.NOME INTO COD_L, NOME_L FROM LOJA L JOIN FUNCIONARIO F ON F.COD_LOJA = L.COD WHERE F.COD = COD_F;
	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L;
	
	SELECT QUANTIDADE INTO QUANT_E FROM ESTOQUE WHERE COD_PRODUTO = COD_P;
	SELECT VALOR_UNITARIO INTO VALOR_UNIT FROM PRODUTO WHERE COD = COD_P;
	SELECT VALOR_PARCELA INTO VALOR_P FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO WHERE COD_PDD = C.COD_PEDIDO;
	
	VALOR_TT_IT := QUANT_V * VALOR_UNIT; --VALOR TOTAL POR ITEM NA TABELA ITEM PEDIDO
	
	IF EXISTS(SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO WHERE COD = COD_F) THEN
			IF EXISTS(SELECT * FROM FUNCIONARIO F JOIN CARGO C ON C.COD = F.COD_CARGO JOIN LOJA L ON L.COD = F.COD_LOJA WHERE F.COD = COD_F AND (C.NOME ILIKE 'Operador de Caixa' OR C.NOME ILIKE 'Vendedor')) THEN
				--PRODUTO NA MESMA LOJA QUE O FUNCIONARIO
				IF EXISTS(SELECT * FROM PRODUTO P JOIN ESTOQUE E ON P.COD = E.COD_PRODUTO JOIN FUNCIONARIO F ON F.COD_LOJA = E.COD_LOJA WHERE E.COD_LOJA = F.COD_LOJA AND E.COD_PRODUTO = COD_P AND F.COD = COD_F) THEN
					IF EXISTS(SELECT * FROM PAGAMENTO WHERE COD = COD_PAG) THEN
						IF EXISTS(SELECT * FROM PEDIDO WHERE COD = COD_PDD) THEN
							--MESMO CLIENTE MESMO FUNCIONARIO
							IF NOT EXISTS(SELECT * FROM PEDIDO P JOIN CLIENTE C ON C.COD = P.COD_CLIENTE JOIN FUNCIONARIO F ON F.COD = P.COD_FUNCIONARIO WHERE P.COD_FUNCIONARIO = COD_F AND P.COD_CLIENTE = COD_C) THEN
								RAISE EXCEPTION 'O CLIENTE AINDA POSSUI UM OUTRO PEDIDO EM ABERTO.';
							--MESMO PEDIDO PRODUTOS DIFERENTES 
							ELSIF EXISTS(SELECT * FROM ITEM_PEDIDO IP JOIN PEDIDO PDD ON PDD.COD = IP.COD_PEDIDO JOIN ESTOQUE E ON E.COD = IP.COD_ESTOQUE JOIN PRODUTO P ON P.COD = E.COD_PRODUTO WHERE IP.COD_PEDIDO = COD_PDD AND E.COD_PRODUTO = COD_P AND IP.COD_ESTOQUE = E.COD) THEN 
								--ITEM PEDIDO
								UPDATE ITEM_PEDIDO SET 
									QUANTIDADE = QUANTIDADE + QUANT_V,
									VALOR_TOTAL_ITEM = VALOR_TOTAL_ITEM + VALOR_TT_IT
								WHERE COD_PEDIDO = COD_PDD AND COD_ESTOQUE = COD_E;

								MESSAGE := 'PEDIDO ATUALIZADO COM SUCESSO.';
							ELSE 
								INSERT INTO ITEM_PEDIDO(COD_PEDIDO, COD_ESTOQUE, QUANTIDADE, VALOR_TOTAL_ITEM) 
								VALUES(COD_PDD, COD_E, QUANT_V, VALOR_TT_IT);
	
								MESSAGE := 'PEDIDO ADICIONADO COM SUCESSO.';
							END IF;

							--PEDIDO
							UPDATE PEDIDO SET VALOR_TOTAL = VALOR_TOTAL + VALOR_TT_IT WHERE COD = COD_PDD;

							--CREDIARIO
							UPDATE CREDIARIO SET
								VALOR_PARCELA = (PDD.VALOR_TOTAL + J.JUROS) / P.QTDD_P
							FROM PEDIDO PDD, 
								(SELECT COUNT(QUANTIDADE_PARCELA) QTDD_P FROM CREDIARIO) P, 
								(SELECT VALOR_JUROS JUROS FROM CREDIARIO) J
							WHERE COD_PEDIDO = COD_PDD;

						ELSE 
							-- PEDIDO
							INSERT INTO PEDIDO(COD_CLIENTE, COD_FUNCIONARIO, COD_PAGAMENTO, VALOR_TOTAL)
							VALUES(COD_C, COD_F, COD_PAG, VALOR_TT_IT) RETURNING COD INTO COD_PDD;
				
							-- ITEM_PEDIDO
							INSERT INTO ITEM_PEDIDO(COD_PEDIDO, COD_ESTOQUE, QUANTIDADE, VALOR_TOTAL_ITEM)
							VALUES(COD_PDD, COD_E, QUANT_V, VALOR_TT_IT);
	
							-- CREDIARIO
							IF NOME_PAG ILIKE 'CREDIÁRIO' THEN
								PERFORM CREDIARIO(COD_PDD, QUANT_PARCELA);
								RAISE INFO 'PEDIDO E CREDIÁRIO CRIADOS COM SUCESSO.';
							END IF;		

								MESSAGE := 'PEDIDO CRIADO COM SUCESSO.';
						END IF;
					ELSE 
						RAISE EXCEPTION 'O TIPO DE PAGAMENTO ''%'' NÃO EXISTE.', NOME_PAG;
					END IF;
				ELSE
					RAISE EXCEPTION 'O PRODUTO INFORMADO ''%'' NÃO EXISTE NA LOJA ''%''', NOME_P, NOME_L;
				END IF;
			ELSE
				RAISE EXCEPTION 'O FUNCIONÁRIO ''%'' NÃO PERTENCE AO SETOR.', IDENTIFICADOR_F;
			END IF;
		ELSE
			RAISE EXCEPTION 'O FUNCIONÁRIO ''%'' NÃO EXISTE.', IDENTIFICADOR_F;
		END IF;
	ELSE
		RAISE EXCEPTION 'O CLIENTE ''%'' NÃO EXISTE.', IDENTIFICADOR_C;
	END IF;

	RETURN MESSAGE;
END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------------FINALIZAR PEDIDO-------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PAGAR_PEDIDO(IDENTIFICADOR_C VARCHAR(100)) --DROP FUNCTION PAGAR_PEDIDO
RETURNS TABLE (
	"n°Pedido" VARCHAR, 
	Cliente VARCHAR(100), 
	Produto VARCHAR(100), 
	Valor NUMERIC(8,2), 
	Quantidade INT, 
	Total NUMERIC(8,2), 
	Data VARCHAR(10), 
	Hora VARCHAR(8), 
	Funcionario VARCHAR(100), 
	Pago TEXT) AS $$
DECLARE
	COD_C INT;
	COD_P INT;
BEGIN 
	SELECT COD INTO COD_C FROM CLIENTE WHERE NOME ILIKE IDENTIFICADOR_C OR CPF ILIKE IDENTIFICADOR_C;
	SELECT COD INTO COD_P FROM PEDIDO P WHERE COD_CLIENTE = COD_C AND P.PAGO = FALSE;

	IF EXISTS(SELECT * FROM PEDIDO P WHERE COD = COD_P AND P.PAGO = FALSE) THEN
		UPDATE PEDIDO SET PAGO = TRUE WHERE COD = COD_P;
		RAISE INFO 'PEDIDO FINALIZADO COM SUCESSO.';
	ELSE
		RAISE EXCEPTION 'O CLIENTE ''%'' NÃO POSSUI PEDIDO EM ABERTO.', IDENTIFICADOR_C;
	END IF;
	
	-- RETORNA A NOTA FISCAL DO PEDIDO
	RETURN QUERY
	SELECT * FROM NOTA_FISCAL(COD_P);
END;
$$ LANGUAGE PLPGSQL;

/*
select * from pedido
select * from produto
select * from item_pedido
select * from estoque
select * from crediario
select * from cliente
select * from funcionario

SELECT * FROM ADD_PEDIDO('Maria Silva Oliveira', 'Camiseta Básica', 5, 'Dinheiro', '456.789.012-34')
SELECT * FROM PAGAR_PEDIDO('123.456.789-10')

SELECT * FROM COMISSAO_FUNCIONARIO
*/
-----------------------------------------------------NOVA TABELA------------------------------------------------------
CREATE TABLE META_LOJA (
    COD_LOJA INT REFERENCES LOJA(COD) PRIMARY KEY,
    META NUMERIC(10,2) NOT NULL DEFAULT 100000.00, -- Meta padrão de 100.000,00
    VENDAS_ATUAIS NUMERIC(10,2) DEFAULT 0.00
);

-----------------------------------------------------FUNCTION ATUALIZAR VENDAS------------------------------------------------------
CREATE OR REPLACE FUNCTION ATUALIZAR_VENDAS_ATUAIS(COD_LOJ INT, VALOR_VENDA NUMERIC(10,2)) --DROP FUNCTION ATUALIZAR_VENDAS_ATUAIS
RETURNS VOID AS $$
BEGIN
    UPDATE META_LOJA
    SET VENDAS_ATUAIS = VENDAS_ATUAIS + VALOR_VENDA
    WHERE COD_LOJA = COD_LOJ;
END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------------FUNCTION COMISSÃO VENDEDOR E OPERADOR------------------------------------------------------
--VENDEDOR E OPERADOR DE CAIXA

CREATE OR REPLACE FUNCTION CALCULAR_COMISSAO_FUNCIONARIO(COD_PEDIDO INT)
RETURNS VOID AS $$
DECLARE
    COD_FUNC INT;
    COD_CAR INT;
    COMISSAO_PERC NUMERIC(4,2);
    VALOR_PEDIDO NUMERIC(10,2);
    VALOR_COMISSAO NUMERIC(10,2);
BEGIN
    -- Busca o código do funcionário e o valor do pedido
    SELECT COD_FUNCIONARIO, VALOR_TOTAL INTO COD_FUNC, VALOR_PEDIDO
    FROM PEDIDO
    WHERE COD = COD_PEDIDO;

    -- Busca o cargo do funcionário
    SELECT COD_CARGO INTO COD_CAR
    FROM FUNCIONARIO
    WHERE COD = COD_FUNC;

    -- Busca a porcentagem de comissão do cargo
    SELECT COMISSAO INTO COMISSAO_PERC
    FROM CARGO
    WHERE COD = COD_CAR;

    -- Calcula o valor da comissão
    VALOR_COMISSAO := VALOR_PEDIDO * COMISSAO_PERC;

    -- Adiciona o valor da comissão ao salário do funcionário
    UPDATE CARGO
    SET SALARIO = SALARIO + VALOR_COMISSAO
	FROM FUNCIONARIO F
    WHERE F.COD = COD_FUNC;

    -- Mensagem informativa
    RAISE NOTICE 'Comissão de R$ % foi adicionada ao salário do funcionário.', VALOR_COMISSAO;
END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------------FUNCTION COMISSÃO GERENTE------------------------------------------------------
CREATE OR REPLACE FUNCTION CALCULAR_COMISSAO_GERENTE(COD_LOJ INT) --DROP FUNCTION CALCULAR_COMISSAO_GERENTE
RETURNS VOID AS $$
DECLARE
    VENDAS NUMERIC(10,2);
    META_L NUMERIC(10,2);
    COMISSAO_GERENTE NUMERIC(8,2);
    COD_GERENTE INT;
BEGIN
    -- Busca a meta e as vendas atuais da loja
    SELECT VENDAS_ATUAIS, META INTO VENDAS, META_L
    FROM META_LOJA
    WHERE COD_LOJA = COD_LOJ;

    -- Busca o código do gerente responsável pela loja
    SELECT COD INTO COD_GERENTE
    FROM FUNCIONARIO
    WHERE COD_CARGO = (SELECT COD FROM CARGO WHERE NOME ILIKE 'Gerente')
    AND COD_LOJA = COD_LOJ;

    -- Determina a comissão do gerente
    IF VENDAS >= META_L THEN
        COMISSAO_GERENTE := (SELECT COMISSAO FROM CARGO WHERE NOME ILIKE 'Gerente') * VENDAS;
    ELSIF VENDAS BETWEEN 45000 AND 70000 THEN
        COMISSAO_GERENTE := (SELECT COMISSAO FROM CARGO WHERE NOME ILIKE 'Gerente') * VENDAS / 2;
    ELSE
        COMISSAO_GERENTE := 0;
    END IF;

    -- Adiciona o valor da comissão ao salário do gerente
    UPDATE CARGO
    SET SALARIO = SALARIO + COMISSAO_GERENTE
    WHERE COD = COD_GERENTE;

    -- Mensagem informativa
    RAISE NOTICE 'Comissão do gerente foi calculada e adicionada.';
END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------------VIEW PARA VISUALIZAR METAS E VENDAS------------------------------------------------------
CREATE OR REPLACE VIEW VER_METAS_LOJAS AS
SELECT L.NOME AS "Loja",
       M.META AS "Meta (R$)",
       M.VENDAS_ATUAIS AS "Vendas Atuais (R$)",
       CASE
           WHEN M.VENDAS_ATUAIS >= M.META THEN 'Meta Atingida'
           WHEN M.VENDAS_ATUAIS BETWEEN 45000 AND 70000 THEN 'Meta Parcialmente Atingida'
           ELSE 'Meta Não Atingida'
       END AS "Status da Meta"
FROM META_LOJA M
JOIN LOJA L ON M.COD_LOJA = L.COD
ORDER BY L.NOME;

-----------------------------------------------------NOVA FUNCTION PAGA_PEDIDO------------------------------------------------------
CREATE OR REPLACE FUNCTION PAGAR_PEDIDO(IDENTIFICADOR_C VARCHAR(100)) --DROP FUNCTION PAGAR_PEDIDO
RETURNS TABLE (
    "n°Pedido" VARCHAR, 
    Cliente VARCHAR(100), 
    Produto VARCHAR(100), 
    Valor NUMERIC(8,2), 
    Quantidade INT, 
    Total NUMERIC(8,2), 
    Data VARCHAR(10), 
    Hora VARCHAR(8), 
    Funcionario VARCHAR(100), 
    "Pago" TEXT) AS $$
DECLARE
    COD_C INT;
    COD_P INT;
    COD_L INT;
    VALOR_PEDIDO NUMERIC(10,2);
BEGIN 
    SELECT COD INTO COD_C FROM CLIENTE WHERE NOME ILIKE IDENTIFICADOR_C OR CPF ILIKE IDENTIFICADOR_C;
    SELECT P.COD, VALOR_TOTAL, COD_LOJA INTO COD_P, VALOR_PEDIDO, COD_L
    FROM PEDIDO P JOIN FUNCIONARIO F ON P.COD_FUNCIONARIO = F.COD
    WHERE COD_CLIENTE = COD_C AND P.PAGO = FALSE;
    
    IF EXISTS(SELECT * FROM PEDIDO WHERE COD = COD_P AND PAGO = FALSE) THEN
		--atualiza o pedido
        UPDATE PEDIDO SET PAGO = TRUE WHERE COD = COD_P;
        RAISE INFO 'PEDIDO FINALIZADO COM SUCESSO.';
        
        -- Atualiza as vendas da loja
        PERFORM ATUALIZAR_VENDAS_ATUAIS(COD_L, VALOR_PEDIDO);
        
        -- Calcula e adiciona a comissão do gerente
        PERFORM CALCULAR_COMISSAO_GERENTE(COD_L);
        
        -- Calcula e adiciona a comissão do vendedor ou operador de caixa
        PERFORM CALCULAR_COMISSAO_FUNCIONARIO(COD_P);
    ELSE
        RAISE EXCEPTION 'O CLIENTE ''%'' NÃO POSSUI PEDIDO EM ABERTO.', IDENTIFICADOR_C;
    END IF;
    
    RETURN QUERY
    SELECT * FROM NOTA_FISCAL(COD_P);
END;
$$ LANGUAGE PLPGSQL;

/*
SELECT * FROM CLIENTE;--DELETE FROM CLIENTE; ALTER SEQUENCE cliente_cod_seq RESTART WITH 1;
SELECT * FROM CARGO;--DELETE FROM CARGO; ALTER SEQUENCE cargo_cod_seq RESTART WITH 1;
SELECT * FROM LOJA;--DELETE FROM LOJA; ALTER SEQUENCE loja_cod_seq RESTART WITH 1;
SELECT * FROM FUNCIONARIO;--DELETE FROM FUNCIONARIO; ALTER SEQUENCE funcionario_cod_seq RESTART WITH 1;
SELECT * FROM PAGAMENTO;--DELETE FROM PAGAMENTO; ALTER SEQUENCE pagamento_cod_seq RESTART WITH 1;
SELECT * FROM CATEGORIA;--DELETE FROM CATEGORIA; ALTER SEQUENCE categoria_cod_seq RESTART WITH 1;
SELECT * FROM PRODUTO;--DELETE FROM PRODUTO; ALTER SEQUENCE produto_cod_seq RESTART WITH 1;
SELECT * FROM ESTOQUE;--DELETE FROM ESTOQUE; ALTER SEQUENCE estoque_cod_seq RESTART WITH 1;
SELECT * FROM PEDIDO;--DELETE FROM PEDIDO; ALTER SEQUENCE pedido_cod_seq RESTART WITH 1;
SELECT * FROM ITEM_PEDIDO;--DELETE FROM ITEM_PEDIDO; ALTER SEQUENCE item_pedido_cod_seq RESTART WITH 1;
SELECT * FROM CREDIARIO;--DELETE FROM CREDIARIO; ALTER SEQUENCE crediario_cod_seq RESTART WITH 1;
SELECT * FROM META_LOJA;--DELETE FROM META_LOJA; ALTER SEQUENCE meta_loja_cod_seq RESTART WITH 1;

SELECT ADD_PEDIDO('João Oliveira Menezes', 'Calça Jeans Skinny', 4, 'Pix','Ana Costa');
SELECT * FROM PAGAR_PEDIDO('João Oliveira Menezes');
SELECT * FROM PAGAR_CREDIARIO('João Oliveira Menezes');

SELECT * FROM VER_METAS_LOJAS
*/
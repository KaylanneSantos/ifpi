--------------------------------------FUNCOES UPDATE SECUNDARY---------------------------------------------------------------------

CREATE OR REPLACE FUNCTION UPDATE_CLIENTE(--DROP FUNCTION UPDATE_CLIENTE
	IDENTIFICADOR_C VARCHAR(100),
	NOME_C VARCHAR(100) DEFAULT NULL,
	CPF_C VARCHAR(15) DEFAULT NULL, 
	CONTATO_C VARCHAR(20) DEFAULT NULL, 
	EMAIL_C VARCHAR(50) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE CPF ILIKE IDENTIFICADOR_C OR NOME ILIKE IDENTIFICADOR_C ) THEN
		RAISE EXCEPTION 'O CLIENTE % NÃO EXISTE.', IDENTIFICADOR_C;
	ELSE
		UPDATE CLIENTE SET
			NOME = COALESCE(NOME_C, NOME),
			CONTATO = COALESCE(CONTATO_C, CONTATO),
			EMAIL = COALESCE(EMAIL_C, EMAIL)
		WHERE CPF ILIKE IDENTIFICADOR_C OR NOME ILIKE IDENTIFICADOR_C;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO CLIENTE %.', IDENTIFICADOR_C;
		ELSE
			RAISE NOTICE 'CLIENTE ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_CARGO(--DROP FUNCTION UPDATE_CARGO
	IDENTIFICADOR_CAR VARCHAR(50),
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	SALARIO_CAR NUMERIC(8,2) DEFAULT NULL,
	COMISSAO_CAR NUMERIC(4,2) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM CARGO WHERE NOME ILIKE IDENTIFICADOR_CAR) THEN 
		RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', IDENTIFICADOR_CAR;
	ELSE 
		UPDATE CARGO SET 
			NOME = COALESCE(NOME_CAR, NOME),
			SALARIO = COALESCE(SALARIO_CAR, SALARIO),
			COMISSAO = COALESCE(COMISSAO_CAR, COMISSAO)
		WHERE NOME ILIKE IDENTIFICADOR_CAR;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO CARGO %.', IDENTIFICADOR_CAR;
		ELSE
			RAISE NOTICE 'CARGO ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_LOJA(--DROP FUNCTION UPDATE_LOJA
	IDENTIFICADOR_L VARCHAR(50),
	NOME_L VARCHAR(20) DEFAULT NULL,
	CNPJ_L VARCHAR(18) DEFAULT NULL,
	ENDERECO_L TEXT DEFAULT NULL)
RETURNS VOID AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE IDENTIFICADOR_L) THEN
		RAISE EXCEPTION 'A % NÃO EXISTE.', IDENTIFICADOR_L;
	ELSE
		UPDATE LOJA SET 
			NOME = COALESCE(NOME_L,NOME),
			CNPJ = COALESCE(CNPJ_L, CNPJ),
			ENDERECO = COALESCE(ENDERECO_L, ENDERECO)
		WHERE NOME ILIKE IDENTIFICADOR_L;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DA %.', IDENTIFICADOR_NOME;
		ELSE
			RAISE NOTICE 'LOJA ATUALIZADA COM SUCESSO.';
		END IF;	
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_FUNCIONARIO( --DROP FUNCTION UPDATE_FUNCIONARIO
	IDENTIFICADOR_F VARCHAR(50),
	NOME_F VARCHAR(50) DEFAULT NULL,  
	CPF_F VARCHAR(50) DEFAULT NULL, 
	CONTATO_F VARCHAR(50) DEFAULT NULL, 
	EMAIL_F VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
	COD_CAR INT; 
	COD_LOJ INT;
BEGIN	
	IF NOT EXISTS(SELECT * FROM FUNCIONARIO WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F) THEN
		RAISE EXCEPTION 'O FUNCIONÁRIO % NÃO EXISTE.', IDENTIFICADOR_F;
	ELSE
	   	UPDATE FUNCIONARIO SET 
            NOME = COALESCE(NOME_F, NOME),
			CPF = COALESCE(CPF_F, CPF),
            CONTATO = COALESCE(CONTATO_F, CONTATO),
            EMAIL = COALESCE(EMAIL_F, EMAIL),
            COD_CARGO = COALESCE((SELECT COD FROM CARGO WHERE NOME ILIKE NOME_CAR), COD_CARGO),
            COD_LOJA = COALESCE((SELECT COD FROM LOJA WHERE NOME ILIKE NOME_LOJ), COD_LOJA)
        WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO FUNCIONÁRIO % ', IDENTIFICADOR_F;
        ELSE
            RAISE NOTICE 'FUNCIONÁRIO ATUALIZADO COM SUCESSO.';
        END IF;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_PAGAMENTO(--DROP FUNCTION UPDATE_PAGAMENTO
	IDENTIFICADOR_PAG VARCHAR(50),
	NOME_PAG VARCHAR(50) DEFAULT NULL)
RETURNS VOID AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM PAGAMENTO WHERE NOME = IDENTIFICADOR_PAG) THEN
		RAISE EXCEPTION 'O TIPO DE PAGAMENTO % NÃO EXISTE.', IDENTIFICADOR_PAG;
	ELSE 
		UPDATE PAGAMENTO SET NOME = NOME_PAG WHERE NOME ILIKE IDENTIFICADOR_PAG;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO PAGAMENTO %', IDENTIFICADOR_PAG;
		END IF;
	
		RAISE NOTICE 'PAGAMENTO ATUALIZADO COM SUCESSO.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_CATEGORIA(--DROP FUNCTION UPDATE_CATEGORIA
	IDENTIFICADOR_C VARCHAR(50),
	NOME_C VARCHAR(50) DEFAULT NULL, 
	DESC_C TEXT DEFAULT NULL)
RETURNS VOID AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM CATEGORIA WHERE NOME ILIKE IDENTIFICADOR_C) THEN
		RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.', IDENTIFICADOR_C;
	ELSE
		UPDATE CATEGORIA SET 
			NOME = COALESCE(NOME_C, NOME),
			DESCRICAO = COALESCE(DESC_C, DESCRICAO)
		WHERE NOME ILIKE IDENTIFICADOR_C;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DA CATEGORIA %', IDENTIFICADOR_C;
		END IF;
	
		RAISE NOTICE 'CATEGORIA ATUALIZADA COM SUCESSO.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_PRODUTO( --DROP FUNCTION UPDATE_PRODUTO
	IDENTIFICADOR_P VARCHAR(100),
	NOME_P VARCHAR(50) DEFAULT NULL, 
	NOME_CAT VARCHAR(50) DEFAULT NULL,
	VALOR_P NUMERIC(8,2) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE IDENTIFICADOR_P) THEN
		RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', IDENTIFICADOR_P;	
	ELSE 
		UPDATE PRODUTO SET 
			NOME = COALESCE(NOME_P,NOME),
			VALOR_UNITARIO = COALESCE(VALOR_P, VALOR_UNITARIO),
			COD_CATEGORIA = COALESCE((SELECT COD FROM CATEGORIA WHERE NOME ILIKE NOME_CAT), COD_CATEGORIA)
		WHERE NOME ILIKE IDENTIFICADOR_P;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO PRODUTO % ', IDENTIFICADOR_P;
		ELSE
			RAISE NOTICE 'PRODUTO ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_ESTOQUE( --DROP FUNCTION UPDATE_ESTOQUE
	IDENTIFICADOR_E VARCHAR(100),
	NOME_PROD VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL,
	QUANT INT DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
	COD_PROD INT;
	COD_LOJ INT;
	NOME_P VARCHAR;
	NOME_L VARCHAR;
	COD_P INT;
	COD_L INT;
	COD_E INT;
BEGIN
	COD_PROD := (SELECT COD FROM PRODUTO WHERE NOME ILIKE SPLIT_PART(IDENTIFICADOR_E,'-',1));
	COD_LOJ := (SELECT COD FROM LOJA WHERE NOME ILIKE SPLIT_PART(IDENTIFICADOR_E,'-',2));

	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_PROD;
	SELECT COD INTO COD_L FROM LOJA WHERE NOME ILIKE NOME_LOJ;

	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L;
	
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ) THEN 
		RAISE EXCEPTION 'O ESTOQUE DO PRODUTO E LOJA INFORMADO NÃO EXISTE.';
	ELSE
		UPDATE ESTOQUE SET 
			COD_PRODUTO = COALESCE((SELECT COD FROM PRODUTO WHERE NOME ILIKE NOME_PROD), COD_PRODUTO),
			COD_LOJA = COALESCE((SELECT COD FROM LOJA WHERE NOME ILIKE NOME_LOJ), COD_LOJA),
			QUANTIDADE = COALESCE(QUANT, QUANTIDADE)
		WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'FALHA NA ATUALIZAÇÃO DO PRODUTO % e %', SPLIT_PART(IDENTIFICADOR_E, '-', 1), SPLIT_PART(IDENTIFICADOR_E, '-', 2);
		ELSE
			RAISE NOTICE 'ESTOQUE ATUALIZADO COM SUCESSO.';
		END IF;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

---------------------------------------------FUNCÃO ALTERAR SECUNDARY----------------------------------------------------------

CREATE OR REPLACE FUNCTION ALTERAR(--PAGAMENTO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR)
	TABELA VARCHAR(9),
	IDENTIFICADOR VARCHAR(50),
	PAGAMENTO VARCHAR(50))
RETURNS VOID AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_PAGAMENTO(IDENTIFICADOR, PAGAMENTO);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CARGO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR,NUMERIC,NUMERIC)
	TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	CARGO VARCHAR(50), 
	SALARIO NUMERIC(8,2),
	COMISSAO NUMERIC(4,2))
RETURNS VOID AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_CARGO(IDENTIFICADOR, CARGO, SALARIO, COMISSAO);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--LOJA DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,varCHAR,text)
	TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	LOJA VARCHAR(50),
	CNPJ VARCHAR(18),
	ENDERECO TEXT)
RETURNS VOID AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_LOJA(IDENTIFICADOR, LOJA, CNPJ, ENDERECO);
		ELSE 
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE .';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CATEGORIA DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,TEXT)
	TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	CATEGORIA VARCHAR(50), 
	DESCRICAO TEXT) 
RETURNS VOID AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_CATEGORIA(IDENTIFICADOR, CATEGORIA, DESCRICAO);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CLIENTE DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR)
	TABELA VARCHAR(7),
	IDENTIFICADOR VARCHAR(100), 
	CLIENTE VARCHAR(100) DEFAULT NULL, 
	CPF VARCHAR(15) DEFAULT NULL,
	CONTATO VARCHAR(20) DEFAULT NULL, 
	EMAIL VARCHAR(50) DEFAULT NULL) 
RETURNS VOID AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_CLIENTE(IDENTIFICADOR,CLIENTE,CPF,CONTATO,EMAIL);
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--FUNCIONARIO DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR)
	TABELA VARCHAR(50), 
	IDENTIFICADOR VARCHAR(100), 
	FUNCIONARIO VARCHAR(100) DEFAULT NULL,
	CPF VARCHAR(15) DEFAULT NULL,
	CONTATO VARCHAR(20) DEFAULT NULL, 
	EMAIL VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL) 
RETURNS VOID AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_FUNCIONARIO(IDENTIFICADOR,FUNCIONARIO,CPF,CONTATO,EMAIL,NOME_CAR,NOME_LOJ);
		ELSE 
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
		RETURN;
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PRODUTO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR,VARCHAR,NUMERIC)
	TABELA VARCHAR(7),
	IDENTIFICADOR VARCHAR(100),
	PRODUTO VARCHAR(50) DEFAULT NULL,
	CATEGORIA VARCHAR(50) DEFAULT NULL,
	VALOR NUMERIC(8,2) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_PRODUTO(IDENTIFICADOR, PRODUTO, CATEGORIA, VALOR::NUMERIC(8,2));
		ELSE
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA ESTOQUE.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;--OBRIGATORIO ATRIBUTO FINAL

CREATE OR REPLACE FUNCTION ALTERAR(--ESTOQUE DROP FUNCTION ALTERAR(varchar,varchar,VARCHAR,VARCHAR,INT)
	TABELA VARCHAR(50), 
	IDENTIFICADOR VARCHAR(100),
	PRODUTO VARCHAR(50), 
	LOJA VARCHAR(50),
	QUANTIDADE INT)
RETURNS VOID AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CLIENTE.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CARGO.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA LOJA.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA FUNCIONÁRIO.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PAGAMENTO.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA CATEGORIA.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS PARA A TABELA PRODUTO.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_ESTOQUE(IDENTIFICADOR,PRODUTO,LOJA,QUANTIDADE::INT);
		ELSE 
			RAISE EXCEPTION 'PARÂMETRO IDENTIFICADOR VÁZIO. POR FAVOR, TENTE NOVAMENTE.';
		END IF;
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA. POR FAVOR, VERIFIQUE O NOME E TENTE NOVAMENTE';
	END IF;
END;
$$ LANGUAGE PLPGSQL;--OBRIGATORIO ATRIBUTO FINAL

-----------------------------------------------------------------------------------------------------------------------

ALTERAR(VARCHAR(4),VARCHAR(50),VARCHAR(20),VARCHAR(18),TEXT)
ALTERAR(VARCHAR(9),VARCHAR(50),VARCHAR(50))
ALTERAR(VARCHAR(7),VARCHAR(100),VARCHAR(100),VARCHAR(15),VARCHAR(20),VARCHAR(50))
ALTERAR(VARCHAR(11),VARCHAR(100),VARCHAR(100),VARCHAR(15),VARCHAR(20),VARCHAR(50),VARCHAR(50),VARCHAR(20)) 
ALTERAR(VARCHAR(5),VARCHAR(50),VARCHAR(50),NUMERIC(8,2),NUMERIC(4,2))
ALTERAR(VARCHAR(9),VARCHAR(50),VARCHAR(50),TEXT) 
ALTERAR(VARCHAR(7),VARCHAR(100),VARCHAR(50),VARCHAR(50),NUMERIC(8,2))
ALTERAR(VARCHAR(7),VARCHAR(100),VARCHAR(50),VARCHAR(20),INT) 
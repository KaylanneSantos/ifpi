--PESSOAS DO SISTEMA
CREATE TABLE LEITOR(
	COD_LEITOR SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	DT_NASC DATE NOT NULL
);

CREATE TABLE FUNCIONARIO(
	COD_FUNC SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	DT_NASC DATE NOT NULL
);

CREATE TABLE AUTOR(
	COD_AUTOR SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	DT_NASC DATE NOT NULL
);

--PRINCIPAIS TABELAS
CREATE TABLE TITULO(
	COD_TIT SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL
);

CREATE TABLE AUTORIA(
	COD_AUTORIA SERIAL NOT NULL PRIMARY KEY,
	COD_TIT INT REFERENCES TITULO(COD_TIT),
	COD_AUTOR INT REFERENCES AUTOR(COD_AUTOR)
);

CREATE TABLE EXEMPLAR(
	COD_EXEMPLAR SERIAL NOT NULL PRIMARY KEY,
	COD_TIT INT REFERENCES TITULO(COD_TIT)
);

CREATE TABLE LIVRO (
    COD_LIVRO SERIAL PRIMARY KEY NOT NULL,
    COD_TITULO INT NOT NULL REFERENCES TITULO(COD_TIT),
    QUANT_ESTOQUE INT NOT NULL,
    VALOR_UNITARIO REAL NOT NULL
);

--EMPRESTIMO E VENDA DOS LIVROS
CREATE TABLE PEDIDO (
    COD_PEDIDO SERIAL PRIMARY KEY NOT NULL,
    COD_LEITOR INT REFERENCES LEITOR(COD_LEITOR),
	COD_FUNC INT REFERENCES FUNCIONARIO(COD_FUNC),
    DATA_PEDIDO DATE NOT NULL,
    HORA_PEDIDO TIMESTAMP NOT NULL,
    VALOR_TOTAL_PEDIDO REAL NOT NULL,
    QUANT_ITENS_PEDIDO INT NOT NULL, 
	PAGO BOOLEAN DEFAULT FALSE
);

CREATE TABLE ITEM_PEDIDO (
	COD_ITEM_PEDIDO SERIAL PRIMARY KEY NOT NULL,
	COD_LIVRO INT REFERENCES LIVRO(COD_LIVRO),
    COD_PEDIDO INT REFERENCES PEDIDO(COD_PEDIDO),
    QUANTIDADE_ITEM INT NOT NULL,
    VALOR_TOTAL_ITEM REAL NOT NULL
);

CREATE TABLE EMPRESTIMO(
	COD_EMP SERIAL NOT NULL PRIMARY KEY,
	COD_LEITOR INT REFERENCES LEITOR(COD_LEITOR),
	COD_EX INT REFERENCES EXEMPLAR(COD_EXEMPLAR),
	COD_FUNC INT REFERENCES FUNCIONARIO(COD_FUNC),
	DT_EMP DATE NOT NULL,
	DT_DEV DATE
);

--INSERT
INSERT INTO LEITOR(NOME, DT_NASC) VALUES
	('Nayara de Almeida', '2004-12-18'), 
	('David Nascimento', '1999-09-21'), 
	('Sophia de Souza', '2001-01-01');
INSERT INTO FUNCIONARIO(NOME, DT_NASC) VALUES
	('Paulo César Lopes', '1980-04-1'),
	('Bárbara Albuquerque', '1998-06-24'),
	('Pedro Lima', '2000-11-30');
INSERT INTO AUTOR(NOME, DT_NASC) VALUES
	('Valencio Aluízio', '1976-01-27'),
	('Graça Maria', '1981-10-02'),
	('Jurandir Gomes', '1955-06-17');
INSERT INTO TITULO(NOME) VALUES
	('Águas Passadas'),
	('Perdendo a Timidez'),
	('A grama do Vizinho'),
	('Contos de Dina'),
	('O Último Herdeiro'),
	('Entre Códigos e Rotas');
INSERT INTO AUTORIA(COD_TIT, COD_AUTOR) VALUES
	(1, 1),
	(1, 2),
	(2, 3),
	(3, 2),
	(4, 1),
	(5, 2),
	(6, 3);
INSERT INTO EXEMPLAR(COD_EXEMPLAR, COD_TIT) VALUES
	(1, 1),
	(2, 1),
	(3, 2),
	(4, 2),
	(5, 3),
	(6, 3),
	(7, 4),
	(8, 4),
	(9, 5),
	(10, 5),
	(11, 6),
	(12, 6);
INSERT INTO LIVRO(COD_TITULO, QUANT_ESTOQUE, VALOR_UNITARIO) VALUES
	(1, 10, 55.75),
	(2, 15, 59.99),
	(3, 10, 24.90),
	(4, 15, 15.50),
	(5, 10, 35.60),
	(6, 10, 70.00);

-----------------------------------------------------------------------------------------------------------------------------------

/*EXERCÍCIO 1) Crie uma função que realiza o pedido de um único livro que possui estoque suficiente. O ato de realizar
pedido consiste em inserir registros nas tabelas Pedido e Item_pedido, além de decrementar a quantidade 
em estoque. Essa funcão deve receber apenas os seguintes parâmetros: Código do pedido, código do livro,
nome do fornecedor (imagine que não existam dois fornecedores com o mesmo nome) e quantidade vendida.*/

CREATE OR REPLACE FUNCTION PEDIDO_LIVRARIA(--DROP FUNCTION PEDIDO_LIVRARIA
	NOME_LEITOR VARCHAR(50),
	NOME_LIVRO VARCHAR(50),
	QUANT_VENDIDA INT, 
	NOME_FUNCIONARIO VARCHAR(50))
RETURNS VOID AS $$
DECLARE
	COD_P INT;
	COD_L INT;
	COD_LIV INT;
	COD_T INT;
	COD_FORN INT;
	COD_FUN INT;
	QUANT_E INT;
	VALOR_UNIT REAL;
BEGIN
	SELECT COD_LEITOR INTO COD_L FROM LEITOR WHERE NOME ILIKE NOME_LEITOR;
	SELECT COD_FUNC INTO COD_FUN FROM FUNCIONARIO WHERE NOME ILIKE NOME_FUNCIONARIO;
	SELECT COD_LIVRO,QUANT_ESTOQUE,VALOR_UNITARIO INTO COD_LIV,QUANT_E,VALOR_UNIT FROM LIVRO L JOIN TITULO T ON T.COD_TIT = L.COD_TITULO WHERE NOME ILIKE NOME_LIVRO;
	SELECT COD_TIT INTO COD_T FROM TITULO T JOIN LIVRO L ON L.COD_TITULO = T.COD_TIT WHERE T.NOME ILIKE NOME_LIVRO;
	
	SELECT COD_PEDIDO INTO COD_P FROM PEDIDO P JOIN LEITOR L ON L.COD_LEITOR = P.COD_LEITOR WHERE P.COD_LEITOR = COD_L AND PAGO = FALSE;
		
	IF EXISTS (SELECT * FROM LEITOR WHERE NOME ILIKE NOME_LEITOR) THEN
		IF EXISTS(SELECT * FROM LIVRO L JOIN TITULO T ON T.COD_TIT = L.COD_TITULO WHERE T.NOME ILIKE NOME_LIVRO) THEN
			IF EXISTS(SELECT * FROM FUNCIONARIO WHERE NOME ILIKE NOME_FUNCIONARIO) THEN
				IF QUANT_VENDIDA <= QUANT_E THEN
					IF EXISTS(SELECT * FROM PEDIDO WHERE COD_PEDIDO = COD_P) THEN
						IF EXISTS(SELECT * FROM ITEM_PEDIDO IP JOIN PEDIDO P ON P.COD_PEDIDO = IP.COD_PEDIDO JOIN LIVRO L ON L.COD_LIVRO = IP.COD_LIVRO JOIN TITULO T ON T.COD_TIT = L.COD_TITULO WHERE T.NOME ILIKE NOME_LIVRO) THEN
							UPDATE ITEM_PEDIDO SET 
								QUANTIDADE_ITEM = QUANTIDADE_ITEM + QUANT_V,
								VALOR_TOTAL_ITEM = VALOR_TOTAL_ITEM + (VALOR_UNIT * QUANT_VENDIDA)
							WHERE COD_PEDIDO = COD_P;

							RAISE NOTICE 'ITEM PEDIDO ATUALIZADO COM SUCESSO.';
						ELSE
							INSERT INTO ITEM_PEDIDO(COD_LIVRO,COD_PEDIDO,QUANTIDADE_ITEM, VALOR_TOTAL_ITEM) 
							VALUES(COD_L,COD_P,QUANT_V,(QUANT_VENDIDA * VALOR_UNIT));

							RAISE NOTICE 'ITEM PEDIDO ADICIANADO COM SUCESSO.';
						END IF;
					ELSE
						INSERT INTO PEDIDO(COD_LEITOR, COD_FUNC, DATA_PEDIDO, HORA_PEDIDO, VALOR_TOTAL_PEDIDO, QUANT_ITENS_PEDIDO) VALUES
						(COD_L, COD_FUN, CURRENT_DATE, CURRENT_TIME, QUANT_ITENS_PEDIDOS + QUANT_VENDIDA, (VALOR_UNIT * QUANT_VENDIDA));

						INSERT INTO ITEM_PEDIDO(COD_LIVRO,COD_PEDIDO,QUANTIDADE_ITEM, VALOR_TOTAL_ITEM)
						VALUES(COD_L, COD_P, QUANT_VENDIDA,(VALOR_UNIT * QUANT_V));

						RAISE NOTICE 'PEDIDO CRIADO COM SUCESSO.';
					END IF;
					UPDATE LIVRO SET QUANT_ESTOQUE = QUANT_ESTOQUE - QUANT_V WHERE COD = COD_L;
					
				ELSE
					RAISE EXCEPTION 'QUANTIDADE EM ESTOQUE INSUFICIENTE.';
				END IF;
			ELSE
				RAISE EXCEPTION 'FUNCIONÁRIO NÃO ENCONTRADO: %. POR FAVOR, TENTE NOVAMENTE.', NOME_FUNCIONARIO;
			END IF;
		ELSE
			RAISE EXCEPTION 'LIVRO NÃO ENCONTRADO: %. POR FAVOR, TENTE NOVAMENTE.', NOME_LIVRO;
		END IF;
	ELSE
		RAISE EXCEPTION 'LEITOR NÃO ENCONTRADO: %. POR FAVOR, TENTE NOVAMENTE', NOME_LEITOR;
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

SELECT COD_TIT INTO COD_T  FROM TITULO T JOIN LIVRO L ON L.COD_TITULO = T.COD_TIT WHERE T.NOME ILIKE 'Águas Passadas';

RAISE NOTICE 'LEITOR, LIVRO E FUNCIONARIO ENCONTRADO: %, %, %.', NOME_LEITOR, NOME_LIVRO, NOME_FUNCIONARIO;
SELECT * FROM LIVRO L JOIN TITULO T ON T.COD_TIT = L.COD_TITULO WHERE T.NOME ILIKE 'Águas Passadas'

SELECT * FROM LIVRO
SELECT * FROM TITULO
SELECT * FROM EXEMPLAR
SELECT * FROM PEDIDO
SELECT * FROM ITEM_PEDIDO
SELECT * FROM LEITOR
SELECT * FROM FUNCIONARIO
SELECT PEDIDO_LIVRARIA('Nayara de Almeida', 'Águas Passadas', 2, 'Paulo César Lopes')
/*EXERCÍCIO 2) Crie uma função que realiza o pedido como deve ser. Inserções nas tabelas PEdido e Item_pedido, além
da atualização da quantidade em estoque. No primeiro produto, deve haver inserções nas duas tabelas.
A partir do segundo, apenas na tebela Item_pedido. Não esqueça de decrementar a quantidade em estoque, 
de atualizar o valor total do pedido e a quantidade de itens da tabela pedido.
Os parâmetros passados para a função são os mesmos da questão anterior.*/

---------------------------------------------------REVISÃO PROVA 2----------------------------------------------------------------------
CREATE TABLE PRODUTO(
	COD SERIAL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	QUANTIDADE INT NOT NULL
);

CREATE TABLE COMBO(
	COD_PROD_COMBO INT NOT NULL REFERENCES PRODUTO(COD)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	COD_PROD INT NOT NULL REFERENCES PRODUTO(COD)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	QUANTIDADE INT NOT NULL	
);

INSERT INTO PRODUTO(NOME, QUANTIDADE) VALUES
	('COCA-COLA', 50), 
	('CACHORRO QUENTE', 50),
	('BATATA FRITA', 50), 
	('COMBO', 50),
	('COMBO 2', 50);
INSERT INTO COMBO(COD_PROD_COMBO, COD_PROD, QUANTIDADE) VALUES
	(4, 1, 2), 
	(4, 2, 2), 
	(4, 3, 1),
	(5, 1, 1), 
	(5, 2, 1), 
	(5, 3, 2);

/*1.(UPDATE) CRIAR UMA FUNÇÃO QUE DECREMENTA SOMENTE OS PRODUTOS COMBOS, COMO CONSEQUÊNCIA DECREMENTAR OS PRODUTOS
QUE COMPÔEM OS COMBOS. A FUNÇÃO IRÁ RECEBER: CÓDIGO DO PRODUTO E QUANTIDADE. 
obs:considere que só exista um combo.*/

CREATE OR REPLACE FUNCTION DECREMENTAR_COMBO(NOME_P VARCHAR(50), QUANT INT)
RETURNS VOID AS $$
DECLARE
	COD_P INT;
BEGIN
	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_P;
		
	IF EXISTS(SELECT * FROM PRODUTO WHERE COD = COD_P) THEN
		UPDATE PRODUTO SET  --DECREMENTA O PRODUTO
			QUANTIDADE = QUANTIDADE - QUANT
		WHERE COD = COD_P;
		
		IF EXISTS(SELECT * FROM COMBO WHERE COD_PROD_COMBO = COD_P) THEN
			UPDATE PRODUTO P SET
				QUANTIDADE = P.QUANTIDADE - (C.QUANTIDADE * QUANT)
			FROM COMBO C WHERE
				P.COD = C.COD_PROD AND COD_PROD_COMBO = COD_P;

			RAISE NOTICE 'PRODUTO(COMBO) VENDIDO COM SUCESSO.';
		END IF;
	ELSE
		RAISE EXCEPTION 'O PRODUTO % NÃO FOI ENCONTRADO.', NOME_P;
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

/*2.(DELETE) CRIAR UMA FUNÇÃO QUE RECEBA O CÓDIGO DE UM PRODUTO NÃO COMBO, SE ESSE PRODUTO NÃO COMBO FIZER PARTE
DE UM COMBO, DELETAR ESSE PRODUTO DO COMBO.*/

CREATE OR REPLACE FUNCTION DELETAR_PRODUTO(NOME_P VARCHAR(20)) --DROP FUNCTION DELETAR_PRODUTO
RETURNS VOID AS $$
DECLARE
	COD_P INT;
BEGIN
	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_P;

	IF EXISTS(SELECT * FROM COMBO WHERE COD_PROD = COD_P) THEN
		DELETE FROM COMBO WHERE COD_PROD = COD_P;
		RAISE NOTICE 'O PRODUTO QUE COMPÕEM COMBO: % FOI DELETADO COM SUCESSO.', NOME_P;
		
		IF EXISTS(SELECT * FROM PRODUTO WHERE COD = COD_P) THEN
			DELETE FROM PRODUTO WHERE COD = COD_P;
			RAISE NOTICE 'O PRODUTO: % FOI DELETADO COM SUCESSO.', NOME_P;	
		ELSE
			RAISE EXCEPTION 'O PRODUTO: % NÃO FOI ENCONTRADO.', NOME_P;
		END IF;
	ELSE
		RAISE EXCEPTION 'O PRODUTO: % NÃO FOI ENCONTRADO.', NOME_P;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

/*CRIAR TRIGGER NÃO PERMITIR QUE UM COMBO COMPONHA OUTRO*/

CREATE OR REPLACE FUNCTION CADASTRAR_COMBO()
RETURNS TRIGGER AS $$
BEGIN
	IF EXISTS(SELECT * FROM COMBO WHERE COD_PROD_COMBO = NEW.COD_PROD) THEN
		RAISE EXCEPTION 'UM COMBO NÃO PODE FAZER PARTE DE OUTRO COMBO';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TG_CADASTRAR_COMBO
BEFORE INSERT ON COMBO
FOR EACH ROW
EXECUTE FUNCTION CADASTRAR_COMBO();

/*CRIAR TRIGGER PARA CONTROLAR A QUANTIDADE VENDIDA*/
CREATE OR REPLACE FUNCTION CONTROLE_QUANTIDADE()
RETURNS TRIGGER AS $$
DECLARE
	QUANT_ESTOQUE INT;
BEGIN
	SELECT QUANTIDADE INTO QUANT_ESTOQUE FROM PRODUTO WHERE COD = NEW.COD;
	IF TG_OP = 'UPDATE' THEN
		IF QUANT_ESTOQUE - NEW.QUANTIDADE >= 2 THEN
			RAISE EXCEPTION 'QUANTIDADE EM ESTOQUE INSUFICIENTE';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CONTROLE_QUANT
BEFORE UPDATE ON PRODUTO
FOR EACH ROW 
EXECUTE FUNCTION CONTROLE_QUANTIDADE()

----------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT DECREMENTAR_COMBO('COMBO 2', 7)

INSERT INTO COMBO(COD_PROD_COMBO, COD_PROD, QUANTIDADE) VALUES (5, 4, 1);

SELECT * FROM PRODUTO
SELECT * FROM COMBO

SELECT DELETAR_PRODUTO('COCA-COLA')

UPDATE PRODUTO SET QUANTIDADE = 50
DELETE FROM COMBO WHERE COD_PROD = 5

--DELETE FROM PRODUTO; ALTER SEQUENCE PRODUTO_COD_SEQ RESTART WITH 1;
--DELETE FROM COMBO;
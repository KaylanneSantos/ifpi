----------------------------------------------------FUNÇÃO CREDIÁRIO---------------------------------------------------------------
CREATE OR REPLACE FUNCTION CARNE_CREDIARIO(COD_P INT, QUANT_P INT)
RETURNS VOID AS $$
DECLARE
	COD_C INT; -- CREDIARIO
	TAXA_J NUMERIC(8,2);
	VALOR_J NUMERIC(8,2);
	VALOR_P NUMERIC(8,2);
	VALOR_TT NUMERIC(8,2);
	DATA_V TIMESTAMP := CURRENT_TIMESTAMP;
BEGIN
	SELECT C.COD INTO COD_C FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO WHERE C.COD_PEDIDO = COD_P;
	SELECT VALOR_TOTAL INTO VALOR_TT FROM PEDIDO WHERE COD = COD_P;

	IF QUANT_P > 0 AND QUANT_P <= 6 THEN
		VALOR_P := (VALOR_TT / QUANT_P);

		FOR PARCELA IN 1..QUANT_P LOOP
			INSERT INTO CREDIARIO(COD_PEDIDO, QUANTIDADE_PARCELA, VALOR_PARCELA,DATA_VENCIMENTO) 
			VALUES(COD_P, PARCELA, VALOR_P, DATA_V);
			DATA_V := DATA_V + INTERVAL '1 MONTH';
		END LOOP;
	
		RAISE INFO 'PARCELAS DO CREDIÁRIO CRIADAS COM SUCESSO.';

	ELSIF QUANT_P > 6 AND QUANT_P <= 12 THEN

		TAXA_J := 0.005;
		VALOR_J := VALOR_TT * TAXA_J;
		VALOR_P := (VALOR_TT + VALOR_J) / QUANT_P;

		FOR PARCELA IN 1..QUANT_P LOOP
			INSERT INTO CREDIARIO(COD_PEDIDO, QUANTIDADE_PARCELA, VALOR_PARCELA,DATA_VENCIMENTO) 
			VALUES(COD_P, PARCELA, VALOR_P, DATA_V);
			DATA_V := DATA_V + INTERVAL '1 MONTH';
		END LOOP;

		RAISE INFO 'PARCELAS DO CREDIÁRIO CRIADAS COM SUCESSO.';
	ELSE
		RAISE EXCEPTION 'QUANTIDADE DE PARCELAS NÃO PERMITIDAS.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------FINALIZAR CREDIÁRIO--------------------------------------------------------------
--FUNCAO SECUNDARIA
CREATE OR REPLACE FUNCTION PAGAR_CREDIARIO(CPF_C VARCHAR(15), DATA_PAG TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
RETURNS VOID AS $$
DECLARE
	COD_P INT;
	COD_C INT;
	VALOR_P NUMERIC;
	DATA_P TIMESTAMP;
	DATA_V TIMESTAMP;
	DIAS_ATRASO INT;
	
	JUROS_ATRASO NUMERIC(4,2);
	PARCELA_ATUAL INT;
BEGIN	
	SELECT C.COD INTO COD_P FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO JOIN CLIENTE CL ON CL.COD = P.COD_CLIENTE WHERE CPF ILIKE CPF_C;
	SELECT COD INTO COD_C FROM CREDIARIO WHERE COD_PEDIDO = COD_P;
	SELECT VALOR_PARCELA, DATA_PAGAMENTO, DATA_VENCIMENTO INTO VALOR_P, DATA_P, DATA_V FROM CREDIARIO WHERE COD_PEDIDO = COD_P AND DATA_PAGAMENTO IS NULL;
	
	SELECT EXTRACT(DAY FROM DATA_PAG - DATA_V) INTO DIAS_ATRASO FROM CREDIARIO;
	
	IF DATA_P IS NOT NULL AND THEN
		RAISE EXCEPTION 'PARCELA JÁ PAGA.';
	ELSE	
		IF DIAS_ATRASO > 0 THEN
			JUROS_ATRASO := VALOR_P * 0.005 * DIAS_ATRASO;
		ELSE
			JUROS_ATRASO := 0;
		END IF;
	
		IF DATA_PAG <= DATA_V THEN
			UPDATE CREDIARIO SET 
				DATA_PAGAMENTO = DATA_PAG,
				VALOR_PARCELA = VALOR_PARCELA + JUROS_ATRASO
			WHERE COD = COD_C AND DATA_VENCIMENTO = DATA_V;
		
			RAISE INFO 'PARCELA PAGA COM SUCESSO.';
		ELSE
			UPDATE CREDIARIO SET
				DATA_PAGAMENTO = DATA_PAG,
				VALOR_PARCELA = VALOR_P + JUROS_ATRASO
			WHERE COD = COD_C AND DATA_VENCIMENTO = DATA_V;
		END IF;	

	RAISE INFO 'PARCELA PAGA COM SUCESSO. JUROS POR ATRASO %.', JUROS_ATRASO;
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

--FUNCAO PRINCIPAL
CREATE OR REPLACE FUNCTION PAGAR_CARNE(CPF_C VARCHAR(15), DATA_PAG TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
RETURNS VOID AS $$
DECLARE
	COD_CLI INT; --CLIENTE
	COD_P INT; --PEDIDO
	COD_C INT; --CREDIARIO
	
	VALOR_P NUMERIC(8,2); --VALOR PARCELA
	DATA_P TIMESTAMP; --DATA PAGAMENTO
	DATA_V TIMESTAMP; --DATA VENCIMENTO
	
	DIAS_ATRASO INT; --DIAS ATRASO
	JUROS_ATRASO NUMERIC(4,2); -- JUROS ATRASO
BEGIN
	SELECT C.COD INTO COD_CLI FROM CLIENTE C JOIN PEDIDO P ON P.COD_CLIENTE = COD_CLI WHERE CPF ILIKE CPF_C; -- CLIENTE
	SELECT P.COD INTO COD_P FROM PEDIDO P JOIN CREDIARIO C ON C.COD_PEDIDO = P.COD WHERE P.COD_CLIENTE = COD_CLI AND C.COD_PEDIDO = COD_P AND P.PAGO = TRUE AND DATA_PAGAMENTO IS NULL GROUP BY P.COD; --PEDIDO
	SELECT C.COD, VALOR_PARCELA, DATA_PAGAMENTO, DATA_VENCIMENTO INTO COD_C, VALOR_P, DATA_P, DATA_V FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO WHERE P.COD_CLIENTE = COD_CLI AND C.COD_PEDIDO = COD_P AND P.PAGO = TRUE AND DATA_PAGAMENTO IS NULL; --CREDIARIO

END;
$$ LANGUAGE PLPGSQL;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--SELECT DA CONDICAO DO UPDATE !!!
SELECT MIN(C.COD) FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO WHERE C.COD_PEDIDO = 48;

UPDATE CREDIARIO SET
	DATA_PAGAMENTO = CURRENT_TIMESTAMP
WHERE COD =(SELECT MIN(C.COD) FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO 
			WHERE C.COD_PEDIDO = 48 AND DATA_PAGAMENTO IS NULL);
----------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM PEDIDO --DELETE FROM PEDIDO
SELECT * FROM ITEM_PEDIDO --DELETE FROM ITEM_PEDIDO
SELECT * FROM CREDIARIO --DELETE FROM CREDIARIO
SELECT * FROM CLIENTE
SELECT * FROM FUNCIONARIO
SELECT * FROM PAGAMENTO
SELECT * FROM CARGO
SELECT * FROM LOJA
SELECT * FROM ESTOQUE
SELECT * FROM PRODUTO
	
SELECT ADD_PEDIDO('789.123.456-78', 'Sapato Anabela Feminino', 10, 'Crediário','901.777.567-99',2)
	
SELECT * FROM FINALIZAR_PEDIDO('789.123.456-78')
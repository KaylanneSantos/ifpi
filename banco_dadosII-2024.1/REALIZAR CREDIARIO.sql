-------------------------------------------------------CARNÊ CREDIARIO-------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION CARNE_CREDIARIO(COD_P INT) --DROP FUNCTION CARNE
RETURNS TABLE(
	"Parcela" TEXT,
	"Cliente" VARCHAR,
	"CPF" VARCHAR,
	"Produto" VARCHAR,
	"Quantidade" INT,
	"Valor" NUMERIC,
    "Valor Juros" VARCHAR,
	"Valor Parcela" NUMERIC,
	"Loja" VARCHAR,
	"cnpj" VARCHAR,
	"Funcionário" VARCHAR,
	"Data Vencimento" VARCHAR,
	"Data Pagamento" VARCHAR,
	"id°Pedido" INT) AS $$
DECLARE 
    CPF_C VARCHAR(15);
BEGIN
    SELECT CPF INTO CPF_C FROM CLIENTE CLI 
    JOIN PEDIDO P ON CLI.COD = P.COD_CLIENTE
    JOIN CREDIARIO C ON P.COD = C.COD_PEDIDO
    WHERE P.COD = COD_P GROUP BY CLI.CPF;
    
    RETURN QUERY
	SELECT 
		'n°' || C.QUANTIDADE_PARCELA as "Parcela",
		CLI.NOME as "Cliente",
		CLI.CPF as cpf,
		PROD.NOME as "Produto",
		IP.QUANTIDADE as "Quantidade",
		PROD.VALOR_UNITARIO as "Valor",
	    CASE 
	        WHEN C.VALOR_JUROS IS NULL OR C.VALOR_JUROS = 0.00 THEN 'Sem Juros'
	        ELSE C.VALOR_JUROS::VARCHAR
	    END AS "Valor Juros",
		C.VALOR_PARCELA as "Valor Parcela",
		L.NOME as "Loja",
		L.CNPJ as "cnpj",
		F.NOME as "Funcionário",
		(TO_CHAR(C.DATA_VENCIMENTO, 'DD-MM-YYYY'))::VARCHAR(10) as "Data Vencimento",
		COALESCE((TO_CHAR(C.DATA_PAGAMENTO, 'DD-MM-YYYY'))::VARCHAR(10), '___/___/____') as "Data Pagamento",
		C.COD_PEDIDO as "id°Pedido"
	FROM CREDIARIO C 
		JOIN PEDIDO P ON P.COD = C.COD_PEDIDO
		JOIN ITEM_PEDIDO IP ON IP.COD_PEDIDO = P.COD
		JOIN ESTOQUE E ON E.COD = IP.COD_ESTOQUE
		JOIN PRODUTO PROD ON PROD.COD = E.COD_PRODUTO
		JOIN LOJA L ON L.COD = E.COD_LOJA
		JOIN CLIENTE CLI ON CLI.COD = P.COD_CLIENTE
		JOIN FUNCIONARIO F ON F.COD = P.COD_FUNCIONARIO
	WHERE CLI.CPF = CPF_C AND C.COD_PEDIDO = COD_P ORDER BY C.QUANTIDADE_PARCELA;
END;
$$ LANGUAGE PLPGSQL;

----------------------------------------------------CRIAR CREDIÁRIO---------------------------------------------------------------

CREATE OR REPLACE FUNCTION CREDIARIO(COD_P INT, QUANT_P INT) --DROP FUNCTION CARNE_CREDIARIO
RETURNS VOID AS $$
DECLARE
	COD_C INT; -- CREDIARIO
	TAXA_J NUMERIC(8,2);
	VALOR_J NUMERIC(8,2);
	VALOR_P NUMERIC(8,2);
	VALOR_TT NUMERIC(8,2);
	DATA_V TIMESTAMP := CURRENT_TIMESTAMP;
BEGIN
	SELECT C.COD INTO COD_C FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO WHERE C.COD_PEDIDO = COD_P;
	SELECT VALOR_TOTAL INTO VALOR_TT FROM PEDIDO WHERE COD = COD_P;

	IF QUANT_P > 0 AND QUANT_P <= 6 THEN
		TAXA_J := 0.00;
		VALOR_J := VALOR_TT * TAXA_J;
		VALOR_P := (VALOR_TT + VALOR_J) / QUANT_P;

		FOR PARCELA IN 1..QUANT_P LOOP
			INSERT INTO CREDIARIO(COD_PEDIDO, QUANTIDADE_PARCELA, VALOR_PARCELA, VALOR_JUROS, DATA_VENCIMENTO) 
			VALUES(COD_P, PARCELA, VALOR_P, VALOR_J, DATA_V);
			DATA_V := DATA_V + INTERVAL '1 MONTH';
		END LOOP;
	
		RAISE INFO 'PARCELAS DO CREDIÁRIO CRIADAS COM SUCESSO.';

	ELSIF QUANT_P > 6 AND QUANT_P <= 12 THEN

		TAXA_J := 0.005;
		VALOR_J := VALOR_TT * TAXA_J;
		VALOR_P := (VALOR_TT + VALOR_J) / QUANT_P;

		FOR PARCELA IN 1..QUANT_P LOOP
			INSERT INTO CREDIARIO(COD_PEDIDO, QUANTIDADE_PARCELA, VALOR_PARCELA, VALOR_JUROS, DATA_VENCIMENTO) 
			VALUES(COD_P, PARCELA, VALOR_P, VALOR_J, DATA_V);
			DATA_V := DATA_V + INTERVAL '1 MONTH';
		END LOOP;

		RAISE INFO 'PARCELAS DO CREDIÁRIO CRIADAS COM SUCESSO.';
	ELSE
		RAISE EXCEPTION 'QUANTIDADE DE PARCELAS NÃO PERMITIDAS.';
	END IF;

END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------PAGAR PARCELAS DO CREDIÁRIO--------------------------------------------------------------

CREATE OR REPLACE FUNCTION PAGAR_CREDIARIO(IDENTIFICADOR_C VARCHAR(100), DATA_PAG TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
RETURNS TABLE(--DROP FUNCTION PAGAR_CREDIARIO
	"Parcela" TEXT,
	"Cliente" VARCHAR,
	"CPF" VARCHAR,
	"Produto" VARCHAR,
	"Quantidade" INT,
	"Valor" NUMERIC,
    "Valor Juros" VARCHAR,
	"Valor Parcela" NUMERIC,
	"Loja" VARCHAR,
	"cnpj" VARCHAR,
	"Funcionário" VARCHAR,
	"Data Vencimento" VARCHAR,
	"Data Pagamento" VARCHAR,
	"id°Pedido" INT) AS $$
DECLARE
	COD_CLI INT;
	COD_P INT;
	COD_C INT;
	VALOR_P NUMERIC(8,2);
	DATA_V TIMESTAMP;

	DATA_P TIMESTAMP;
	DIAS_ATRASO INT;
	
	JUROS_ATRASO NUMERIC(4,2);
	JUROS_DIARIO NUMERIC(4,4) := 0.005;
BEGIN
	SELECT C.COD INTO COD_CLI FROM CLIENTE C JOIN PEDIDO P ON P.COD_CLIENTE = C.COD WHERE NOME ILIKE IDENTIFICADOR_C OR CPF ILIKE IDENTIFICADOR_C; -- CLIENTE
	SELECT P.COD, C.COD, VALOR_PARCELA INTO COD_P, COD_C, VALOR_P FROM PEDIDO P JOIN CREDIARIO C ON C.COD_PEDIDO = P.COD WHERE P.COD_CLIENTE = COD_CLI AND C.COD_PEDIDO = P.COD AND P.PAGO = TRUE AND DATA_PAGAMENTO IS NULL GROUP BY P.COD, C.COD; --PEDIDO
	
	--SELECT DATA_VENCIMENTO, DATA_PAGAMENTO INTO DATA_V, DATA_P FROM CREDIARIO C WHERE DATA_VENCIMENTO = (SELECT MIN(DATA_VENCIMENTO) FROM CREDIARIO C WHERE C.COD_PEDIDO = COD_P AND DATA_PAGAMENTO IS NULL) AND C.COD_PEDIDO = COD_P; --DATA VENCIMENTO/DATA PAGAMENTO
	SELECT DATA_VENCIMENTO INTO DATA_V FROM CREDIARIO WHERE COD = (SELECT MIN(COD) FROM CREDIARIO WHERE COD_PEDIDO = COD_P AND DATA_PAGAMENTO IS NULL); --CREDIARIO
	SELECT DATA_PAGAMENTO INTO DATA_P FROM CREDIARIO WHERE COD = (SELECT MIN(COD) FROM CREDIARIO WHERE COD_PEDIDO = COD_P AND DATA_VENCIMENTO = DATA_V); --PEDIDO
	
	SELECT EXTRACT(DAY FROM DATA_PAG - DATA_V) INTO DIAS_ATRASO FROM CREDIARIO; --QUANT DE DIAS DE ATRASO

	IF EXISTS(SELECT * FROM CLIENTE C JOIN PEDIDO P ON P.COD_CLIENTE = C.COD WHERE P.COD_CLIENTE = COD_CLI) THEN
		IF EXISTS(SELECT * FROM PEDIDO P JOIN CREDIARIO C ON C.COD_PEDIDO = P.COD WHERE C.COD_PEDIDO = COD_P AND P.PAGO = TRUE) THEN
			IF DATA_P IS NOT NULL THEN
				RAISE EXCEPTION 'PARCELA JÁ PAGA.';
			ELSE
				IF DIAS_ATRASO > 0 THEN
					JUROS_ATRASO := VALOR_P * JUROS_DIARIO * DIAS_ATRASO;
				ELSE
					JUROS_ATRASO := 0;
				END IF;	
	
				--ATUALIZA A PARCELA COM O VALOR DO JUROS
				UPDATE CREDIARIO SET 
					DATA_PAGAMENTO = DATA_PAG,
					VALOR_PARCELA = VALOR_P + JUROS_ATRASO
				WHERE DATA_VENCIMENTO = 
					(SELECT MIN(DATA_VENCIMENTO) FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO 
				WHERE C.COD_PEDIDO = COD_P AND DATA_PAGAMENTO IS NULL);

				RAISE NOTICE 'PARCELA PAGA COM SUCESSO.';
			END IF;
		ELSE
			RAISE EXCEPTION 'O PEDIDO INFORMADO NÃO EXISTE OU AINDA NÃO FOI FINALIZADO.';
		END IF;
	ELSE
		RAISE EXCEPTION 'O CLIENTE % NÃO POSSUI PARCELAS A PAGAR.', IDENTIFICADOR_C;
	END IF;
	
	RETURN QUERY
	SELECT * FROM CARNE_CREDIARIO(COD_P);
END;
$$ LANGUAGE PLPGSQL;

/*
SELECT * FROM PEDIDO; --DELETE FROM PEDIDO ALTER SEQUENCE pedido_cod_seq RESTART WITH 1;
SELECT * FROM ITEM_PEDIDO; --DELETE FROM ITEM_PEDIDO ALTER SEQUENCE item_pedido_cod_seq RESTART WITH 1;
SELECT * FROM CREDIARIO; --DELETE FROM CREDIARIO ALTER SEQUENCE crediario_cod_seq RESTART WITH 1;
SELECT * FROM CLIENTE;
SELECT * FROM FUNCIONARIO;
SELECT * FROM LOJA;
SELECT * FROM ESTOQUE;
SELECT * FROM PRODUTO;
SELECT * FROM PAGAMENTO;
SELECT * FROM CARGO;

SELECT ADD_PEDIDO('João Oliveira Menezes', 'Vestido Midi Floral', 1, 'Crediário','Ana Costa', 12);
SELECT * FROM PAGAR_PEDIDO('João Oliveira Menezes');
SELECT * FROM PAGAR_CREDIARIO('João Oliveira Menezes');
*/
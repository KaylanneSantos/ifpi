------------------------------------------------FUNCTIONS UPDATE-----------------------------------------------------
CREATE OR REPLACE FUNCTION UPDATE_CLIENTE(--DROP FUNCTION UPDATE_CLIENTE
	IDENTIFICADOR_CPF VARCHAR(15),
	CPF_C VARCHAR(15) DEFAULT NULL, 
	NOME_C VARCHAR(100) DEFAULT NULL,
	CONTATO_C VARCHAR(20) DEFAULT NULL, 
	EMAIL_C VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Cliente" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar
) AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE CPF ILIKE IDENTIFICADOR_CPF ) THEN
		RAISE EXCEPTION 'O CLIENTE % NÃO EXISTE.', IDENTIFICADOR_CPF;
	ELSE
		UPDATE CLIENTE SET
			NOME = COALESCE(NOME_C, NOME),
			CONTATO = COALESCE(CONTATO_C, CONTATO),
			EMAIL = COALESCE(EMAIL_C, EMAIL)
		WHERE CPF ILIKE IDENTIFICADOR_CPF;

		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização do cliente de cpf % ', CPF_C;
		END IF;
	
	RAISE NOTICE 'DADOS DE CLIENTE ATUALIZADO COM SUCESSO.';
	END IF;
	
	RETURN QUERY
	SELECT cod, nome, cpf, contato, email FROM CLIENTE WHERE CPF ILIKE CPF_C OR CPF ILIKE IDENTIFICADOR_CPF;
END;
$$ LANGUAGE PLPGSQL;
select * from cliente 
select * from update_cliente('987.654.321-00',null, null, '(86) 99876-5432',null)
	
CREATE OR REPLACE FUNCTION UPDATE_CARGO(--DROP FUNCTION UPDATE_CARGO
	IDENTIFICADOR_NOME VARCHAR(50),
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	SALARIO_CAR NUMERIC(8,2) DEFAULT NULL,
	COMISSAO_CAR NUMERIC(4,2) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Cargo" varchar,
	"Salário" numeric,
	"Comissão" numeric
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM CARGO WHERE NOME ILIKE IDENTIFICADOR_NOME) THEN 
		RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', IDENTIFICADOR_NOME;
	ELSE 
		UPDATE CARGO SET 
			NOME = COALESCE(NOME_CAR, NOME),
			SALARIO = COALESCE(SALARIO_CAR, SALARIO),
			COMISSAO = COALESCE(COMISSAO_CAR, COMISSAO)
		WHERE NOME ILIKE NOME_CAR;

		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização do cargo % ', IDENTIFICADOR_NOME;
		END IF;

		RAISE NOTICE 'DADOS DO CARGO ATUALIZADO COM SUCESSO.';
	END IF;
	
	RETURN QUERY 
	SELECT cod, nome, salario, comissao FROM CARGO WHERE NOME ILIKE NOME_CAR OR NOME ILIKE IDENTIFICADOR_NOME;
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_LOJA(-- DROP FUNCTION UPDATE_LOJA
	IDENTIFICADOR_NOME VARCHAR(50),
	NOME_L VARCHAR(50) DEFAULT NULL,
	CNPJ_L VARCHAR(18) DEFAULT NULL,
	ENDERECO_L TEXT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Loja" varchar,
	"Cnpj" varchar,
	"Endereco" text
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE IDENTIFICADOR_NOME) THEN
		RAISE EXCEPTION 'A LOJA % NÃO EXISTE.', IDENTIFICADOR_NOME;
	ELSE
		UPDATE LOJA SET 
			NOME = COALESCE(NOME_L,NOME),
			CNPJ = COALESCE(CNPJ_L, CNPJ),
			ENDERECO = COALESCE(ENDERECO_L, ENDERECO)
		WHERE NOME ILIKE NOME_L;

		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização de loja % ', IDENTIFICADOR_NOME;
		END IF;
	
		RAISE NOTICE 'DADOS DA LOJA ATUALIZADA COM SUCESSO.';	
	END IF;
	
	RETURN QUERY 
		SELECT cod, nome, cnpj, endereco FROM LOJA WHERE NOME ILIKE NOME_L OR NOME ILIKE IDENTIFICADOR_NOME;
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_FUNCIONARIO(
	IDENTIFICADOR_CPF VARCHAR(15),
	CPF_F VARCHAR(50) DEFAULT NULL, 
	NOME_F VARCHAR(50) DEFAULT NULL,  
	CONTATO_F VARCHAR(50) DEFAULT NULL, 
	EMAIL_F VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Funcionario" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar,
	"Cargo" varchar,
	"Loja" varchar	
) AS $$
DECLARE
	COD_CAR INT; 
	COD_LOJ INT;
BEGIN	
	IF NOT EXISTS(SELECT * FROM FUNCIONARIO WHERE CPF ILIKE IDENTIFICADOR_CPF) THEN
		RAISE EXCEPTION 'O FUNCIONARIO DE CPF % NÃO EXISTE.', IDENTIFICADOR_CPF;
	ELSE
		IF NOME_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET NOME = NOME_F WHERE CPF ILIKE IDENTIFICADOR_CPF;
			RAISE NOTICE 'DADOS DO FUNCIONARIO ATUALIZADOS COM SUCESSO.';
		END IF;
	
		IF CONTATO_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET CONTATO = CONTATO_F WHERE CPF ILIKE IDENTIFICADOR_CPF;
			RAISE NOTICE 'DADOS DO FUNCIONARIO ATUALIZADOS COM SUCESSO.';
		END IF;
	
		IF EMAIL_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET EMAIL = EMAIL_F WHERE CPF ILIKE IDENTIFICADOR_CPF;
			RAISE NOTICE 'DADOS DO FUNCIONARIO ATUALIZADOS COM SUCESSO.';
		END IF;
	
		IF NOME_CAR IS NOT NULL THEN
			SELECT COD INTO COD_CAR FROM CARGO WHERE NOME ILIKE NOME_CAR;
	
			IF EXISTS(SELECT * FROM CARGO WHERE COD = COD_CAR) THEN
				UPDATE FUNCIONARIO SET COD_CARGO = COD_CAR WHERE CPF ILIKE IDENTIFICADOR_CPF;
				RAISE NOTICE 'DADOS DO FUNCIONARIO ATUALIZADOS COM SUCESSO.';
			ELSE
				RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', NOME_CAR;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_LOJ;
	
			IF EXISTS(SELECT * FROM LOJA WHERE COD = COD_LOJ) THEN
				UPDATE FUNCIONARIO SET COD_LOJA = COD_LOJ WHERE CPF ILIKE IDENTIFICADOR_CPF;
				RAISE NOTICE 'DADOS DO FUNCIONARIO ATUALIZADOS COM SUCESSO.';
			ELSE
				RAISE EXCEPTION 'A LOJA % NÃO EXISTE.', NOME_LOJ;
			END IF;
	
			IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
				RAISE EXCEPTION 'Falha na atualização de funcionário % ', IDENTIFICADOR_NOME;
			END IF;
	
		END IF;
	END IF;
	
	RETURN QUERY 
		SELECT f.cod, f.nome, cpf, contato, email, c.nome, l.nome FROM FUNCIONARIO F 
			JOIN CARGO C ON C.COD = F.COD_CARGO 
			JOIN LOJA L ON L.COD = F.COD_LOJA 
		WHERE CPF ILIKE CPF_F OR CPF ILIKE IDENTIFICADOR_CPF;	
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_CATEGORIA(--DROP FUNCTION UPDATE_CATEGORIA
	IDENTIFICADOR_NOME VARCHAR(50),
	NOME_C VARCHAR(50) DEFAULT NULL, 
	DESC_C TEXT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Categoria" varchar,
	"Descrição" text
) AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM CATEGORIA WHERE NOME ILIKE IDENTIFICADOR_NOME) THEN
		RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.', IDENTIFICADOR_NOME;
	ELSE
		UPDATE CATEGORIA SET 
			NOME = COALESCE(NOME_C, NOME),
			DESCRICAO = COALESCE(DESC_C, DESCRICAO)
		WHERE NOME ILIKE IDENTIFICADOR_NOME;
	
		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização da categoria % ', IDENTIFICADOR_NOME;
		END IF;
	
		RAISE NOTICE 'DADOS DE CATEGORIA ATUALIZADOS COM SUCESSO.';
	END IF;
	
	RETURN QUERY
		SELECT cod, nome, descricao FROM CATEGORIA WHERE NOME ILIKE IDENTIFICADOR_NOME OR NOME ILIKE NOME_C;
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_PRODUTO(
	IDENTIFICADOR_NOME VARCHAR(100),
	NOME_P VARCHAR(100) DEFAULT NULL, 
	VALOR_P NUMERIC(8,2) DEFAULT NULL,
	NOME_CAT VARCHAR(100) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Valor Unitário" numeric,
	"Categoria" varchar
) AS $$
DECLARE
	COD_CAT INT;
BEGIN 
	IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE IDENTIFICADOR_NOME) THEN
		RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', IDENTIFICADOR_NOME;
	ELSE 
		IF NOME_P IS NOT NULL OR VALOR_P IS NOT NULL THEN
			UPDATE PRODUTO SET 
				NOME = COALESCE(NOME_P, NOME),
				VALOR_UNITARIO = COALESCE(VALOR_P, VALOR_UNITARIO)
			WHERE NOME ILIKE IDENTIFICADOR_NOME;
			RAISE NOTICE 'DADOS DE PRODUTO ATUALIZADOS COM SUCESSO.';
		END IF;

		IF NOME_CAT IS NOT NULL THEN
			SELECT COD INTO COD_CAT FROM CATEGORIA WHERE NOME ILIKE NOME_CAT;

			IF EXISTS(SELECT * FROM CATEGORIA WHERE COD = COD_CAT) THEN
				UPDATE PRODUTO SET COD_CATEGORIA = COD_CAT 
				WHERE NOME ILIKE IDENTIFICADOR_NOME;
				RAISE NOTICE 'DADOS DE PRODUTO ATUALIZADOS COM SUCESSO.';
			ELSE
				RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.',NOME_CAT;
			END IF;
		END IF;

		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização do produto % ', IDENTIFICADOR_NOME;
		END IF;
	END IF;

	RETURN QUERY 
		SELECT p.cod, p.nome, valor_unitario, c.nome FROM PRODUTO P
			JOIN CATEGORIA C ON C.COD = P.COD_CATEGORIA
		WHERE P.NOME ILIKE IDENTIFICADOR_NOME OR P.NOME ILIKE NOME_P;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_PAGAMENTO(--drop function update_pagamento
	IDENTIFICADOR_NOME VARCHAR(50),
	NOME_PAG VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Tipo Pagamento" varchar
) AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM PAGAMENTO WHERE NOME = IDENTIFICADOR_NOME) THEN
		RAISE EXCEPTION 'O TIPO DE PAGAMENTO % NÃO EXISTE.', IDENTIFICADOR_NOME;
	ELSE 
		UPDATE PAGAMENTO SET NOME = NOME_PAG WHERE NOME ILIKE IDENTIFICADOR_NOME;
	
		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização do produto % ', IDENTIFICADOR_NOME;
		END IF;
	
		RAISE NOTICE 'PAGAMENTO ATUALIZADO COM SUCESSO.';
	END IF;

	RETURN QUERY
		SELECT cod, nome FROM PAGAMENTO WHERE NOME ILIKE NOME_PAG OR NOME ILIKE IDENTIFICADOR_NOME;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_ESTOQUE(
	IDENTIFICADOR_PL VARCHAR(100),
	NOME_PROD VARCHAR(100) DEFAULT NULL, 
	NOME_LOJ VARCHAR(50) DEFAULT NULL,
	QUANT INT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int
) AS $$
DECLARE
	COD_PROD INT;
	COD_LOJ INT;
	NOME_P VARCHAR;
	NOME_L VARCHAR;
	COD_P INT;
	COD_L INT;
	COD_E INT;
BEGIN
	NOME_P := SPLIT_PART(IDENTIFICADOR_PL,'-',1);
	NOME_L := SPLIT_PART(IDENTIFICADOR_PL,'-',2);

	SELECT COD INTO COD_PROD FROM PRODUTO WHERE NOME ILIKE NOME_P;
	SELECT COD INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_L;

	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
	
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ) THEN 
		RAISE EXCEPTION 'O PRODUTO OU A LOJA INFORMADA NÃO EXISTE.';
	
	ELSE 
		IF QUANT IS NOT NULL THEN
			UPDATE ESTOQUE SET QUANTIDADE = QUANT WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
		END IF;
	
		IF NOME_PROD IS NOT NULL THEN
			SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_PROD;
	
			IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE NOME_PROD) THEN
				RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', NOME_PROD;
			ELSE 
				UPDATE ESTOQUE SET COD_PRODUTO = COD_P WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD INTO COD_L FROM LOJA WHERE NOME ILIKE NOME_LOJ;
	
			IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE NOME_LOJ) THEN 
				RAISE EXCEPTION 'A LOJA % NÃO EXISTE.', NOME_LOJ;
			ELSE
				UPDATE ESTOQUE SET COD_LOJA = COD_L WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
			END IF;
		END IF;

		IF NOT FOUND THEN -- VERIFICA SE HOUVE FALHA NO UPDATE
			RAISE EXCEPTION 'Falha na atualização do estoque do produto % e loja %', NOME_P, NOME_LW;
		END IF;
	
		RAISE NOTICE 'ESTOQUE ATUALIZADO COM SUCESSO.';
	END IF;
	
	RETURN QUERY 
		SELECT e.cod, p.nome, l.nome, quantidade FROM ESTOQUE E 
			JOIN PRODUTO P ON P.COD = E.COD_PRODUTO
			JOIN LOJA L ON L.COD = E.COD_LOJA
		WHERE E.COD = COD_E;
END;
$$ LANGUAGE PLPGSQL;
--ex:
SELECT * FROM UPDATE_ESTOQUE('Camiseta Básica-Loja 1', 'Camiseta Básica', null,null) 
---------------------------------------------FUNCÃO ALTERAR----------------------------------------------------------

CREATE OR REPLACE FUNCTION ALTERAR(--LOJA
	TABELA VARCHAR(50),
	NOME VARCHAR(100),
	CNPJ VARCHAR(18),
	ENDERECO TEXT)
RETURNS VOID AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		IF NOME IS NOT NULL THEN
			PERFORM UPDATE_LOJA(NOME, CNPJ, ENDERECO);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PAGAMENTO
	TABELA VARCHAR(50),
	NOME VARCHAR(100))
RETURNS VOID AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		IF NOME IS NOT NULL THEN
			PERFORM UPDATE_PAGAMENTO(NOME);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CLIENTE
	TABELA VARCHAR(50),
	CPF VARCHAR(15), 
	NOME VARCHAR(100), 
	CONTATO VARCHAR(20), 
	EMAIL VARCHAR(50)) 
RETURNS VOID AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		IF (NOME IS NOT NULL OR CPF IS NOT NULL OR CONTATO IS NOT NULL OR EMAIL IS NOT NULL) THEN
			PERFORM UPDATE_CLIENTE(CPF,NOME,CONTATO,EMAIL);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--FUNCIONARIO
	TABELA VARCHAR(50), 
	CPF VARCHAR(15), 
	NOME VARCHAR(100), 
	CONTATO VARCHAR(20), 
	EMAIL VARCHAR(50),
	NOME_CAR VARCHAR(50), 
	NOME_LOJ VARCHAR(10)) 
RETURNS VOID AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		IF (NOME IS NOT NULL OR CPF IS NOT NULL OR CONTATO IS NOT NULL OR EMAIL IS NOT NULL OR NOME_CAR IS NOT NULL OR NOME_LOJ IS NOT NULL) THEN
			PERFORM UPDATE_FUNCIONARIO(CPF, NOME, CONTATO, EMAIL, NOME_CAR, NOME_LOJ);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CARGO
	TABELA VARCHAR(50), 
	NOME VARCHAR(100), 
	SALARIO NUMERIC(8,2),
	COMISSAO NUMERIC(4,2))
RETURNS VOID AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		IF NOME IS NOT NULL OR SALARIO IS NOT NULL THEN
			PERFORM UPDATE_CARGO(NOME, SALARIO, COMISSAO);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CATEGORIA
	TABELA VARCHAR(50),
	NOME VARCHAR(100), 
	DESCRICAO VARCHAR(150)) 
RETURNS VOID AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		IF NOME IS NOT NULL OR DESCRICAO IS NOT NULL THEN
			PERFORM UPDATE_CATEGORIA(NOME, DESCRICAO);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PRODUTO
	TABELA VARCHAR(50),
	PRODUTO VARCHAR(100), 
	VALOR NUMERIC(8,2),
	CATEGORIA VARCHAR(100))
RETURNS VOID AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		IF PRODUTO IS NOT NULL OR VALOR IS NOT NULL OR CATEGORIA IS NOT NULL THEN
			PERFORM UPDATE_PRODUTO(PRODUTO, VALOR, CATEGORIA);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--ESTOQUE
	TABELA VARCHAR(50), 
	COD INT,
	PRODUTO VARCHAR(100), 
	LOJA VARCHAR(10), 
	QUANTIDADE INT) 
RETURNS VOID AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		IF PRODUTO IS NOT NULL OR LOJA IS NOT NULL OR QUANTIDADE IS NOT NULL THEN
			PERFORM UPDATE_ESTOQUE(COD, PRODUTO, LOJA, QUANTIDADE);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
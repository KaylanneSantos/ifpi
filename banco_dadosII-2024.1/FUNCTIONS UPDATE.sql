------------------------------------------------FUNCTIONS UPDATE-----------------------------------------------------
CREATE OR REPLACE FUNCTION UPDATE_CLIENTE(--DROP FUNCTION UPDATE_CLIENTE
	IDENTIFICADOR_C VARCHAR(100),
	NOME_C VARCHAR(100) DEFAULT NULL,
	CPF_C VARCHAR(15) DEFAULT NULL, 
	CONTATO_C VARCHAR(20) DEFAULT NULL, 
	EMAIL_C VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Cliente" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar
) AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE CPF ILIKE IDENTIFICADOR_C OR NOME ILIKE IDENTIFICADOR_C ) THEN
		RAISE EXCEPTION 'O cliente % nâo existe.', IDENTIFICADOR_C;
	ELSE
		UPDATE CLIENTE SET
			NOME = COALESCE(NOME_C, NOME),
			CONTATO = COALESCE(CONTATO_C, CONTATO),
			EMAIL = COALESCE(EMAIL_C, EMAIL)
		WHERE CPF ILIKE IDENTIFICADOR_C OR NOME ILIKE IDENTIFICADOR_C;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização do(a) %.', IDENTIFICADOR_C;
		ELSE
			RAISE NOTICE 'Cliente atualizado com sucesso.';
		END IF;
	END IF;
	
	RETURN QUERY
	SELECT cod, nome, cpf, contato, email FROM CLIENTE WHERE CPF ILIKE COALESCE(CPF_C, IDENTIFICADOR_C) OR NOME ILIKE COALESCE(NOME_C, IDENTIFICADOR_C);
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_CARGO(--DROP FUNCTION UPDATE_CARGO
	IDENTIFICADOR_CAR VARCHAR(50),
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	SALARIO_CAR NUMERIC(8,2) DEFAULT NULL,
	COMISSAO_CAR NUMERIC(4,2) DEFAULT NULL,
	ATIVO_CAR BOOLEAN DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Cargo" varchar,
	"Salário" numeric,
	"Comissão" numeric
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM CARGO WHERE NOME ILIKE IDENTIFICADOR_CAR) THEN 
		RAISE EXCEPTION 'O cargo % nâo existe.', IDENTIFICADOR_CAR;
	ELSE 
		UPDATE CARGO SET 
			NOME = COALESCE(NOME_CAR, NOME),
			SALARIO = COALESCE(SALARIO_CAR, SALARIO),
			COMISSAO = COALESCE(COMISSAO_CAR, COMISSAO),
			ATIVO = COALESCE(ATIVO_CAR, ATIVO)
		WHERE NOME ILIKE IDENTIFICADOR_CAR;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização do cargo % ', IDENTIFICADOR_CAR;
		ELSE
			RAISE NOTICE 'Cargo atualizado com sucesso.';
		END IF;
	END IF;
	
	RETURN QUERY 
	SELECT cod, nome, salario, comissao FROM CARGO WHERE NOME ILIKE COALESCE(NOME_CAR, IDENTIFICADOR_CAR);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_LOJA(--DROP FUNCTION UPDATE_LOJA
	IDENTIFICADOR_L VARCHAR(50),
	NOME_L VARCHAR(20) DEFAULT NULL,
	CNPJ_L VARCHAR(18) DEFAULT NULL,
	ENDERECO_L TEXT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Loja" varchar,
	"Cnpj" varchar,
	"Endereco" text
) AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE IDENTIFICADOR_L) THEN
		RAISE EXCEPTION 'A loja % não existe.', IDENTIFICADOR_L;
	ELSE
		UPDATE LOJA SET 
			NOME = COALESCE(NOME_L,NOME),
			CNPJ = COALESCE(CNPJ_L, CNPJ),
			ENDERECO = COALESCE(ENDERECO_L, ENDERECO)
		WHERE NOME ILIKE IDENTIFICADOR_L;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização da % ', IDENTIFICADOR_NOME;
		ELSE
			RAISE NOTICE 'Loja atualizado com sucesso.';
		END IF;	
	END IF;
	
	RETURN QUERY 
		SELECT cod, nome, cnpj, endereco FROM LOJA WHERE NOME ILIKE COALESCE(NOME_L,IDENTIFICADOR_L);
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_FUNCIONARIO( --DROP FUNCTION UPDATE_FUNCIONARIO
	IDENTIFICADOR_F VARCHAR(50),
	NOME_F VARCHAR(50) DEFAULT NULL,  
	CPF_F VARCHAR(50) DEFAULT NULL, 
	CONTATO_F VARCHAR(50) DEFAULT NULL, 
	EMAIL_F VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Funcionario" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar,
	"Cargo" varchar,
	"Loja" varchar	
) AS $$
DECLARE
	COD_CAR INT; 
	COD_LOJ INT;
BEGIN	
	IF NOT EXISTS(SELECT * FROM FUNCIONARIO WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F) THEN
		RAISE EXCEPTION 'O funcionario % não existe.', IDENTIFICADOR_F;
	ELSE
		IF NOME_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET NOME = NOME_F WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;
			RAISE NOTICE 'Dados do funcionario atualizados com sucesso.';
		END IF;
	
		IF CONTATO_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET CONTATO = CONTATO_F WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;
			RAISE NOTICE 'Dados do funcionario atualizados com sucesso.';
		END IF;
	
		IF EMAIL_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET EMAIL = EMAIL_F WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;
			RAISE NOTICE 'Dados do funcionario atualizados com sucesso.';
		END IF;
	
		IF NOME_CAR IS NOT NULL THEN
			SELECT COD INTO COD_CAR FROM CARGO WHERE NOME ILIKE NOME_CAR;
	
			IF EXISTS(SELECT * FROM CARGO WHERE COD = COD_CAR) THEN
				UPDATE FUNCIONARIO SET COD_CARGO = COD_CAR WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;
				RAISE NOTICE 'Dados do funcionario atualizados com sucesso.';
			ELSE
				RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', NOME_CAR;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_LOJ;
	
			IF EXISTS(SELECT * FROM LOJA WHERE COD = COD_LOJ) THEN
				UPDATE FUNCIONARIO SET COD_LOJA = COD_LOJ WHERE CPF ILIKE IDENTIFICADOR_F OR NOME ILIKE IDENTIFICADOR_F;
			ELSE
				RAISE EXCEPTION 'A loja % não existe.', NOME_LOJ;
			END IF;
	
			IF NOT FOUND THEN
				RAISE EXCEPTION 'Falha na atualização de funcionário % ', IDENTIFICADOR_F;
			ELSE
				RAISE NOTICE 'Dados do funcionario atualizados com sucesso.';
			END IF;
		END IF;
	END IF;
	
	RETURN QUERY 
		SELECT f.cod, f.nome, cpf, contato, email, c.nome, l.nome FROM FUNCIONARIO F 
			JOIN CARGO C ON C.COD = F.COD_CARGO 
			JOIN LOJA L ON L.COD = F.COD_LOJA 
		WHERE CPF ILIKE COALESCE(CPF_F,IDENTIFICADOR_F) OR F.NOME ILIKE COALESCE(NOME_F,IDENTIFICADOR_F);	
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_CATEGORIA(--DROP FUNCTION UPDATE_CATEGORIA
	IDENTIFICADOR_C VARCHAR(50),
	NOME_C VARCHAR(50) DEFAULT NULL, 
	DESC_C TEXT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Categoria" varchar,
	"Descrição" text
) AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM CATEGORIA WHERE NOME ILIKE IDENTIFICADOR_C) THEN
		RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.', IDENTIFICADOR_C;
	ELSE
		UPDATE CATEGORIA SET 
			NOME = COALESCE(NOME_C, NOME),
			DESCRICAO = COALESCE(DESC_C, DESCRICAO)
		WHERE NOME ILIKE IDENTIFICADOR_C;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização da categoria %', IDENTIFICADOR_C;
		END IF;
	
		RAISE NOTICE 'Dados da categoria atualizados com sucesso.';
	END IF;
	
	RETURN QUERY
		SELECT cod, nome, descricao FROM CATEGORIA WHERE NOME ILIKE COALESCE(NOME_C,IDENTIFICADOR_C);
END;
$$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION UPDATE_PRODUTO( --DROP FUNCTION UPDATE_PRODUTO
	IDENTIFICADOR_P VARCHAR(100),
	NOME_P VARCHAR(50) DEFAULT NULL, 
	VALOR_P NUMERIC(8,2) DEFAULT NULL,
	NOME_CAT VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Valor Unitário" numeric,
	"Categoria" varchar
) AS $$
DECLARE
	COD_CAT INT;
BEGIN 
	IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE IDENTIFICADOR_P) THEN
		RAISE EXCEPTION 'O produto % não existe.', IDENTIFICADOR_P;
	ELSE 
		IF NOME_P IS NOT NULL OR VALOR_P IS NOT NULL THEN
			UPDATE PRODUTO SET 
				NOME = COALESCE(NOME_P, NOME),
				VALOR_UNITARIO = COALESCE(VALOR_P, VALOR_UNITARIO)
			WHERE NOME ILIKE IDENTIFICADOR_P;
		END IF;

		IF NOME_CAT IS NOT NULL THEN
			SELECT COD INTO COD_CAT FROM CATEGORIA WHERE NOME ILIKE NOME_CAT;

			IF EXISTS(SELECT * FROM CATEGORIA WHERE COD = COD_CAT) THEN
				UPDATE PRODUTO SET COD_CATEGORIA = COD_CAT 
				WHERE NOME ILIKE IDENTIFICADOR_P;
			ELSE
				RAISE EXCEPTION 'A categoria % não existe.',NOME_CAT;
			END IF;
		END IF;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização do produto % ', IDENTIFICADOR_P;
		ELSE
			RAISE NOTICE 'Dados do produto atualizados com sucesso.';
		END IF;
	END IF;

	RETURN QUERY 
		SELECT p.cod, p.nome, valor_unitario, c.nome FROM PRODUTO P
			JOIN CATEGORIA C ON C.COD = P.COD_CATEGORIA
		WHERE P.NOME ILIKE COALESCE(NOME_P,IDENTIFICADOR_P);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_PAGAMENTO(--DROP FUNCTION UPDATE_PAGAMENTO
	IDENTIFICADOR_PAG VARCHAR(50),
	NOME_PAG VARCHAR(50) DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Tipo Pagamento" varchar
) AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM PAGAMENTO WHERE NOME = IDENTIFICADOR_PAG) THEN
		RAISE EXCEPTION 'O tipo de pagamento % não existe.', IDENTIFICADOR_PAG;
	ELSE 
		UPDATE PAGAMENTO SET NOME = NOME_PAG WHERE NOME ILIKE IDENTIFICADOR_PAG;
	
		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização do produto %', IDENTIFICADOR_PAG;
		END IF;
	
		RAISE NOTICE 'Pagamento atualizado com sucesso.';
	END IF;

	RETURN QUERY
		SELECT cod, nome FROM PAGAMENTO WHERE NOME ILIKE COALESCE(NOME_PAG,IDENTIFICADOR_PAG);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION UPDATE_ESTOQUE( --DROP FUNCTION UPDATE_ESTOQUE
	IDENTIFICADOR_E VARCHAR(100),
	NOME_PROD VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL,
	QUANT INT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int
) AS $$
DECLARE
	COD_PROD INT;
	COD_LOJ INT;
	NOME_P VARCHAR;
	NOME_L VARCHAR;
	COD_P INT;
	COD_L INT;
	COD_E INT;
BEGIN
	NOME_P := SPLIT_PART(IDENTIFICADOR_E,'-',1);
	NOME_L := SPLIT_PART(IDENTIFICADOR_E,'-',2);

	SELECT COD INTO COD_PROD FROM PRODUTO WHERE NOME ILIKE NOME_P;
	SELECT COD INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_L;

	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
	
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ) THEN 
		RAISE EXCEPTION 'O estoque do produto e loja informados não existe.';
	
	ELSE 
		IF QUANT IS NOT NULL THEN
			UPDATE ESTOQUE SET QUANTIDADE = QUANT WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
		END IF;
	
		IF NOME_PROD IS NOT NULL THEN
			SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_PROD;
	
			IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE NOME_PROD) THEN
				RAISE EXCEPTION 'O produto % não existe.', NOME_PROD;
			ELSE 
				UPDATE ESTOQUE SET COD_PRODUTO = COD_P WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD INTO COD_L FROM LOJA WHERE NOME ILIKE NOME_LOJ;
	
			IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE NOME_LOJ) THEN 
				RAISE EXCEPTION 'A loja % não existe.', NOME_LOJ;
			ELSE
				UPDATE ESTOQUE SET COD_LOJA = COD_L WHERE COD_PRODUTO = COD_PROD AND COD_LOJA = COD_LOJ;
			END IF;
		END IF;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização do estoque do produto % e loja %', NOME_P, NOME_L;
		ELSE
			RAISE NOTICE 'Estoque atualizado com sucesso.';
		END IF;
	END IF;
	
	RETURN QUERY 
		SELECT e.cod, p.nome, l.nome, quantidade FROM ESTOQUE E 
			JOIN PRODUTO P ON P.COD = E.COD_PRODUTO
			JOIN LOJA L ON L.COD = E.COD_LOJA
		WHERE E.COD = COD_E;
END;
$$ LANGUAGE PLPGSQL;
-----------------------------------------------2° TENTATIVA-----------------------------------------------------------
CREATE OR REPLACE FUNCTION UPDATE_ESTOQUE2( --DROP FUNCTION UPDATE_ESTOQUE2
	IDENTIFICADOR_P VARCHAR(50),
	IDENTIFICADOR_L VARCHAR(20) DEFAULT NULL,
	NOME_PROD VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(20) DEFAULT NULL,
	QUANT INT DEFAULT NULL)
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int
) AS $$
DECLARE
	--NOME_P VARCHAR;
	--NOME_L VARCHAR;
	COD_P INT;
	COD_L INT;
	COD_E INT;
	COD_PROD INT;
	COD_LOJ INT;
BEGIN
	--NOME_P := SPLIT_PART(IDENTIFICADOR_E,'-',1);
	--NOME_L := SPLIT_PART(IDENTIFICADOR_E,'-',2);
	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE IDENTIFICADOR_P;
	SELECT COD INTO COD_L FROM LOJA WHERE NOME ILIKE IDENTIFICADOR_L;

	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L;
	
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L) THEN 
		RAISE EXCEPTION 'O estoque do produto e loja informados não existe.';
	
	ELSE 
		IF QUANT IS NOT NULL THEN
			UPDATE ESTOQUE SET QUANTIDADE = QUANT WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L;
		END IF;
	
		IF NOME_PROD IS NOT NULL THEN
			SELECT COD INTO COD_PROD FROM PRODUTO WHERE NOME ILIKE NOME_PROD;
	
			IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE NOME_PROD) THEN
				RAISE EXCEPTION 'O produto % não existe.', NOME_PROD;
			ELSE 
				UPDATE ESTOQUE SET COD_PRODUTO = COD_PROD WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_LOJ;
	
			IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE NOME_LOJ) THEN 
				RAISE EXCEPTION 'A loja % não existe.', NOME_LOJ;
			ELSE
				UPDATE ESTOQUE SET COD_LOJA = COD_LOJ WHERE COD_PRODUTO = COD_P AND COD_LOJA = COD_L;
			END IF;
		END IF;

		IF NOT FOUND THEN
			RAISE EXCEPTION 'Falha na atualização do estoque do produto % e %', IDENTIFICADOR_P, IDENTIFICADOR_L;
		ELSE
			RAISE NOTICE 'Estoque atualizado com sucesso.';
		END IF;
	END IF;
	
	RETURN QUERY 
		SELECT e.cod, p.nome, l.nome, quantidade FROM ESTOQUE E 
			JOIN PRODUTO P ON P.COD = E.COD_PRODUTO
			JOIN LOJA L ON L.COD = E.COD_LOJA
		WHERE E.COD = COD_E;
END;
$$ LANGUAGE PLPGSQL;

---------------------------------------------FUNCÃO ALTERAR----------------------------------------------------------

CREATE OR REPLACE FUNCTION ALTERAR(--LOJA DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,VARCHAR,varchar)
	TABELA TEXT,
	IDENTIFICADOR VARCHAR(50),
	LOJA VARCHAR(20),
	CNPJ VARCHAR(18),
	ENDERECO VARCHAR(100))
RETURNS TABLE(
	"id°" int,
	"Loja" varchar,
	"Cnpj" varchar,
	"Endereco" text	
) AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY 
			SELECT * FROM UPDATE_LOJA(IDENTIFICADOR, LOJA, CNPJ, ENDERECO);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PAGAMENTO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR)
	TABELA TEXT,
	IDENTIFICADOR VARCHAR(50),
	PAGAMENTO VARCHAR(50))
RETURNS TABLE(
	"id°" int,
	"Tipo Pagamento" varchar	
) AS $$
BEGIN
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_PAGAMENTO(IDENTIFICADOR, PAGAMENTO);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;	
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CLIENTE DROP FUNCTION ALTERAR(TEXT,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR)
	TABELA CHAR(7),
	IDENTIFICADOR VARCHAR(100), 
	CLIENTE VARCHAR(100), 
	CPF VARCHAR(15),
	CONTATO VARCHAR(20), 
	EMAIL VARCHAR(50)) 
RETURNS TABLE(
	"id°" int,
	"Cliente" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_CLIENTE(IDENTIFICADOR,CLIENTE,CPF,CONTATO,EMAIL);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--FUNCIONARIO DROP FUNCTION ALTERAR(TEXT,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR)
	TABELA VARCHAR(100), 
	IDENTIFICADOR VARCHAR(100), 
	FUNCIONARIO VARCHAR(100), 
	CPF VARCHAR(15),
	CONTATO VARCHAR(20), 
	EMAIL VARCHAR(50),
	NOME_CAR VARCHAR(50), 
	NOME_LOJ VARCHAR(20)) 
RETURNS TABLE(
	"id°" int,
	"Funcionario" varchar,
	"Cpf" varchar,
	"Contato" varchar,
	"Email" varchar,
	"Cargo" varchar,
	"Loja" varchar	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_FUNCIONARIO(IDENTIFICADOR,FUNCIONARIO,CPF,CONTATO,EMAIL,NOME_CAR,NOME_LOJ);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CARGO DROP FUNCTION ALTERAR(varchar,VARCHAR,TEXT,NUMERIC,NUMERIC)
	TABELA VARCHAR(50), 
	IDENTIFICADOR VARCHAR(50),
	CARGO TEXT, 
	SALARIO NUMERIC(8,2),
	COMISSAO NUMERIC(4,2),
	ATIVO BOOLEAN)
RETURNS TABLE(
	"id°" int,
	"Cargo" varchar,
	"Salário" numeric,
	"Comissão" numeric	
) AS $$
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_CARGO(IDENTIFICADOR, CARGO::VARCHAR, SALARIO, COMISSAO, ATIVO);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--CATEGORIA DROP FUNCTION ALTERAR(VARCHAR,VARCHAR,VARCHAR,varchar)
	TABELA VARCHAR(50),
	IDENTIFICADOR VARCHAR(50),
	CATEGORIA VARCHAR(50), 
	DESCRICAO VARCHAR(150)) 
RETURNS TABLE(
	"id°" int,
	"Categoria" varchar,
	"Descrição" text	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_CATEGORIA(IDENTIFICADOR, CATEGORIA, DESCRICAO::TEXT);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ALTERAR(--PRODUTO DROP FUNCTION ALTERAR(varchar,VARCHAR,VARCHAR,VARCHAR,NUMERIC)
	TABELA VARCHAR(100),
	IDENTIFICADOR VARCHAR(100),
	PRODUTO VARCHAR(50),
	CATEGORIA VARCHAR(50),
	VALOR NUMERIC(8,2))
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Valor Unitário" numeric,
	"Categoria" varchar	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			PERFORM UPDATE_PRODUTO(IDENTIFICADOR, PRODUTO, VALOR, CATEGORIA);
		ELSE
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL; --erro de incompatibilidade com o numero de atributos !!!!!!!!!!!!!

CREATE OR REPLACE FUNCTION ALTERAR(--ESTOQUE DROP FUNCTION ALTERAR(varchar,varchar,VARCHAR,VARCHAR,INT)
	TABELA VARCHAR(50), 
	IDENTIFICADOR VARCHAR(100),
	PRODUTO VARCHAR(50) DEFAULT NULL, 
	LOJA VARCHAR(20) DEFAULT NULL,
	QUANTIDADE INT DEFAULT NULL) 
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		IF IDENTIFICADOR IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_ESTOQUE(IDENTIFICADOR,PRODUTO,LOJA,QUANTIDADE);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--------------------------------------------------2°TENTATIVA-----------------------------------------------------------
CREATE OR REPLACE FUNCTION ALTERAR(--ESTOQUE DROP FUNCTION ALTERAR(varchar,varchar,VARCHAR,VARCHAR,INT)
	TABELA VARCHAR(50), 
	IDENTIFICADOR_P VARCHAR(50),
	IDENTIFICADOR_L VARCHAR(20),
	PRODUTO VARCHAR(50) DEFAULT NULL, 
	LOJA VARCHAR(20) DEFAULT NULL,
	QUANTIDADE INT DEFAULT NULL) 
RETURNS TABLE(
	"id°" int,
	"Produto" varchar,
	"Loja" varchar,
	"Quantidade" int	
) AS $$
DECLARE
BEGIN 
	IF TABELA ILIKE 'CLIENTE' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CARGO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'LOJA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'FUNCIONARIO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PAGAMENTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'CATEGORIA' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'PRODUTO' THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
	ELSIF TABELA ILIKE 'ESTOQUE' THEN
		IF IDENTIFICADOR_P IS NOT NULL AND IDENTIFICADOR_L IS NOT NULL THEN
			RETURN QUERY
			SELECT * FROM UPDATE_ESTOQUE2(IDENTIFICADOR_P, IDENTIFICADOR_L,PRODUTO,LOJA,QUANTIDADE);
		ELSE 
			RAISE EXCEPTION 'PARÂMETROS INCORRETOS.';
		END IF;
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
SELECT * FROM ESTOQUE
SELECT * FROM PRODUTO
SELECT * FROM ALTERAR('ESTOQUE','Sapato Anabela Feminino','Loja 2', NULL, NULL,50) 
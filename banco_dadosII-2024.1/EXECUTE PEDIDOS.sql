--------------------------------------------------CRIAR PEDIDO--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION ADD_PEDIDO(
	CPF_C VARCHAR(15), 
	NOME_P VARCHAR(50), 
	QUANT_V INT, 
	NOME_PAG VARCHAR(50), 
	CPF_F VARCHAR(15),
	QUANT_PARCELA INT DEFAULT 0)
RETURNS VOID AS $$
DECLARE
	COD_PDD INT; --PEDIDO
	COD_C INT;
	COD_P INT;
	COD_F INT;
	COD_E INT;
	COD_PAG INT;
	COD_L INT;
	NOME_L VARCHAR;
	QUANT_E INT;
	VALOR_UNIT NUMERIC(8,2);
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF ILIKE CPF_C;
	SELECT COD INTO COD_F FROM FUNCIONARIO WHERE CPF ILIKE CPF_F;
	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME ILIKE NOME_P;
	SELECT P.COD INTO COD_PDD FROM PEDIDO P JOIN CLIENTE C ON C.COD = P.COD_CLIENTE WHERE P.COD_CLIENTE = COD_C AND PAGO = FALSE;
	SELECT COD INTO COD_E FROM ESTOQUE WHERE COD_PRODUTO = COD_P;
	SELECT COD INTO COD_PAG FROM PAGAMENTO WHERE NOME ILIKE NOME_PAG;
	
	SELECT L.COD INTO COD_L FROM LOJA L JOIN FUNCIONARIO F ON F.COD_LOJA = L.COD JOIN ESTOQUE E ON E.COD_LOJA = L.COD WHERE F.COD = COD_F;
	SELECT L.NOME INTO NOME_L FROM LOJA L JOIN FUNCIONARIO F ON F.COD_LOJA = L.COD JOIN ESTOQUE E ON E.COD_LOJA = L.COD WHERE F.COD = COD_F;

	SELECT QUANTIDADE INTO QUANT_E FROM ESTOQUE WHERE COD_PRODUTO = COD_P;
	SELECT VALOR_UNITARIO INTO VALOR_UNIT FROM PRODUTO WHERE COD = COD_P;

	--CLIENTE
	IF EXISTS(SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		--FUNCIONARIO
		IF EXISTS(SELECT * FROM FUNCIONARIO WHERE COD = COD_F) THEN
			-- FUNCIONARIO CARGO
			IF EXISTS(SELECT * FROM FUNCIONARIO F JOIN CARGO C ON C.COD = F.COD_CARGO JOIN LOJA L ON L.COD = F.COD_LOJA WHERE F.COD = COD_F AND C.NOME ILIKE 'Operador de Caixa' OR C.NOME ILIKE 'Vendedor') THEN
				--PRODUTO NA MESMA LOJA QUE O FUNCIONARIO
				IF EXISTS(SELECT * FROM PRODUTO P JOIN ESTOQUE E ON P.COD = E.COD_PRODUTO JOIN FUNCIONARIO F ON F.COD_LOJA = E.COD_LOJA WHERE E.COD_LOJA = F.COD_LOJA AND E.COD_PRODUTO = COD_P AND F.COD = COD_F) THEN
					--QUANTIDADE EM ESTOQUE
					IF (QUANT_E >= QUANT_V) THEN
						--PAGAMENTO
						IF EXISTS(SELECT * FROM PAGAMENTO WHERE COD = COD_PAG) THEN
							--PEDIDO
							IF EXISTS(SELECT * FROM PEDIDO WHERE COD = COD_PDD) THEN
								--MESMO CLIENTE MESMO FUNCIONARIO
								IF NOT EXISTS(SELECT * FROM PEDIDO P JOIN CLIENTE C ON C.COD = P.COD_CLIENTE JOIN FUNCIONARIO F ON F.COD = P.COD_FUNCIONARIO WHERE P.COD_FUNCIONARIO = COD_F AND P.COD_CLIENTE = COD_C) THEN
									RAISE EXCEPTION 'O PEDIDO % JÁ EXISTE, PORÉM OS DADOS NÃO CORRESPONDEM', COD_PDD;
								--MESMO PEDIDO PRODUTOS DIFERENTES
								ELSIF EXISTS(SELECT * FROM ITEM_PEDIDO IP JOIN ESTOQUE E ON E.COD = IP.COD_ESTOQUE JOIN PRODUTO P ON P.COD = E.COD_PRODUTO WHERE IP.COD = COD_PDD AND COD_P = E.COD_PRODUTO) THEN
									--ITEM PEDIDO
									UPDATE ITEM_PEDIDO SET 
										QUANTIDADE = QUANTIDADE + QUANT_V,
										VALOR_TOTAL_ITEM = VALOR_TOTAL_ITEM + (VALOR_UNIT * QUANT_V)
									WHERE COD_PEDIDO = COD_PDD AND COD_ESTOQUE = COD_E; 
									RAISE INFO 'PEDIDO ATUALIZADO COM SUCESSO.';
	
								ELSE 
									INSERT INTO ITEM_PEDIDO(COD_PEDIDO, COD_ESTOQUE, QUANTIDADE, VALOR_TOTAL_ITEM) VALUES(COD_PDD, COD_E, QUANT_V, (QUANT_V * VALOR_UNIT));
									RAISE INFO 'PEDIDO ADICIONADO COM SUCESSO.';
	
								END IF;
								UPDATE PEDIDO SET VALOR_TOTAL = VALOR_TOTAL + (VALOR_UNIT * QUANT_V) WHERE COD = COD_PDD;
							ELSE 
								-- PEDIDO
								INSERT INTO PEDIDO(COD_CLIENTE, COD_FUNCIONARIO, COD_PAGAMENTO, VALOR_TOTAL)
								VALUES(COD_C, COD_F, COD_PAG, (VALOR_UNIT * QUANT_V)) RETURNING COD INTO COD_PDD;
					
								-- ITEM_PEDIDO
								INSERT INTO ITEM_PEDIDO(COD_PEDIDO, COD_ESTOQUE, QUANTIDADE, VALOR_TOTAL_ITEM)
								VALUES(COD_PDD, COD_E, QUANT_V, (VALOR_UNIT * QUANT_V));
		
								-- CREDIARIO
								IF NOME_PAG ILIKE 'CREDIÁRIO' THEN
									PERFORM CARNE_CREDIARIO(COD_PDD, QUANT_PARCELA);
									RAISE INFO 'PEDIDO E CREDIÁRIO CRIADOS COM SUCESSO.';
								ELSE		
									RAISE INFO 'PEDIDO CRIADO COM SUCESSO.';
								END IF;
							END IF;
							--DECREMENTA O ESTOQUE
							UPDATE ESTOQUE SET QUANTIDADE = QUANTIDADE - QUANT_V WHERE COD = COD_E;
						ELSE 
							RAISE EXCEPTION 'O TIPO DE PAGAMENTO ''%'' NÃO EXISTE.', NOME_PAG;
						END IF;
					ELSE
						RAISE EXCEPTION 'QUANTIDADE EM ESTOQUE INSUFICIENTE.';
					END IF;
				ELSE
					RAISE EXCEPTION 'O PRODUTO INFORMADO ''%'' NÃO EXISTE NA LOJA ''%''', NOME_P, NOME_L;
				END IF;
			ELSE
				RAISE EXCEPTION 'O FUNCIONÁRIO ''%'' NÃO PERTENCE AO SETOR.', CPF_F;
			END IF;
		ELSE
			RAISE EXCEPTION 'O FUNCIONÁRIO ''%'' NÃO EXISTE.', CPF_F;
		END IF;
	ELSE
		RAISE EXCEPTION 'O CLIENTE ''%'' NÃO EXISTE.', CPF_C;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

SELECT ADD_PEDIDO('789.123.456-78', 'Vestido Midi Floral', 3, 'Crediário','901.777.567-99',12)
	
-----------------------------------------------------FINALIZAR PEDIDO-------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION FINALIZAR_PEDIDO(CPF_C VARCHAR(15))
RETURNS TABLE (
	"n°Pedido" VARCHAR, 
	Cliente VARCHAR(100), 
	Produto VARCHAR(100), 
	Valor NUMERIC(8,2), 
	Quantidade INT, 
	Total NUMERIC(8,2), 
	Data VARCHAR(10), 
	Hora VARCHAR(8), 
	Funcionario VARCHAR(100),
	Pago BOOLEAN) AS $$
DECLARE
	COD_C INT;
	COD_P INT;
BEGIN 
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF ILIKE CPF_C;
	SELECT COD INTO COD_P FROM PEDIDO P WHERE COD_CLIENTE = COD_C AND P.PAGO = FALSE;

	IF EXISTS(SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		IF EXISTS(SELECT * FROM PEDIDO P WHERE COD = COD_P AND P.PAGO = FALSE) THEN
			UPDATE PEDIDO SET PAGO = TRUE WHERE COD = COD_P;
			RAISE INFO 'PEDIDO FINALIZADO COM SUCESSO.';
			-- RETORNA A NOTA FISCAL DO PEDIDO
			RETURN QUERY
		 		SELECT * FROM NOTA_FISCAL(CPF_C);
		ELSE
			RAISE EXCEPTION 'O CLIENTE ''%'' NÃO POSSUI PEDIDO EM ABERTO.', CPF_C;
		END IF;
	ELSE
		RAISE EXCEPTION 'O CLIENTE ''%'' NÃO EXISTE.',CPF_C;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

SELECT * FROM FINALIZAR_PEDIDO('987.654.321-00')

-----------------------------------------------------NOTA FISCAL----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION NOTA_FISCAL(CPF_C VARCHAR(15))
RETURNS TABLE (
	"n°Pedido" VARCHAR, 
	Cliente VARCHAR(100), 
	Produto VARCHAR(100), 
	Valor NUMERIC(8,2), 
	Quantidade INT, 
	Total NUMERIC(8,2), 
	Data VARCHAR(10), 
	Hora VARCHAR(8), 
	Funcionario VARCHAR(100), 
	Pago BOOLEAN) AS $$
DECLARE
	COD_C INT;
	COD_PDD INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	SELECT P.COD INTO COD_PDD FROM PEDIDO P JOIN CLIENTE C ON C.COD = P.COD_CLIENTE WHERE C.COD = COD_C; --AND P.PAGO = FALSE;

	IF EXISTS(SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		IF EXISTS(SELECT * FROM PEDIDO WHERE COD = COD_PDD) THEN
			RETURN QUERY
				SELECT 
					(PDD.Pedido)::VARCHAR "n°Pedido", 
					PDD.Cliente, 
					PDD.Produto, 
					PDD.Valor, 
					PDD.Quantidade, 
					PDD.Total, 
					PDD.Data, 
					PDD.Hora,
					PDD.Funcionario,
					PDD.Pago
				FROM PEDIDOS PDD
				WHERE PDD.Pedido = COD_PDD;
		ELSE
			RAISE EXCEPTION 'O CLIENTE % NÃO POSSUI VENDAS EM ABERTO.', CPF_C;
		END IF;
	ELSE
		RAISE EXCEPTION 'O CLIENTE % NÃO EXISTE.', CPF_C;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

----------------------------------------------------FUNÇÃO CREDIÁRIO---------------------------------------------------------------
CREATE OR REPLACE FUNCTION CARNE_CREDIARIO(COD_P INT, QUANT_P INT)
RETURNS VOID AS $$
DECLARE
	COD_C INT; -- CREDIARIO
	TAXA_J NUMERIC(4,2);
	VALOR_J NUMERIC(4,2);
	VALOR_P NUMERIC(4,2);
	VALOR_TT NUMERIC(4,2);
	DATA_V TIMESTAMP := CURRENT_TIMESTAMP;
BEGIN
	SELECT C.COD INTO COD_C FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO WHERE C.COD_PEDIDO = COD_P;
	SELECT VALOR_TOTAL INTO VALOR_TT FROM PEDIDO WHERE COD = COD_P;

	IF QUANT_P > 0 AND QUANT_P <= 6 THEN
		VALOR_P := (VALOR_TT / QUANT_P);

		FOR PARCELA IN 1..QUANT_P LOOP
			INSERT INTO CREDIARIO(COD_PEDIDO, QUANTIDADE_PARCELA, VALOR_PARCELA,DATA_VENCIMENTO) 
			VALUES(COD_P, PARCELA, VALOR_P, DATA_V);
			DATA_V := DATA_V + INTERVAL '1 MONTH';
		END LOOP;
	
		RAISE INFO 'PARCELAS DO CREDIÁRIO CRIADAS COM SUCESSO.';

	ELSIF QUANT_P > 6 AND QUANT_P <= 12 THEN

		TAXA_J := 0.005;
		VALOR_J := VALOR_TT * TAXA_J;
		VALOR_P := (VALOR_TT + VALOR_J) / QUANT_P;

		FOR PARCELA IN 1..QUANT_P LOOP
			INSERT INTO CREDIARIO(COD_PEDIDO, QUANTIDADE_PARCELA, VALOR_PARCELA,DATA_VENCIMENTO) 
			VALUES(COD_P, PARCELA, VALOR_P, DATA_V);
			DATA_V := DATA_V + INTERVAL '1 MONTH';
		END LOOP;

		RAISE INFO 'PARCELAS DO CREDIÁRIO CRIADAS COM SUCESSO.';
	ELSE
		RAISE EXCEPTION 'QUANTIDADE DE PARCELAS NÃO PERMITIDAS.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

-----------------------------------------------FINALIZAR CREDIÁRIO--------------------------------------------------------------

CREATE OR REPLACE FUNCTION PAGAR_CREDIARIO(CPF_C VARCHAR(15), DATA_PAG TIMESTAMP)
RETURNS VOID AS $$
DECLARE
	VALOR_P NUMERIC;
	JUROS_ATRASO NUMERIC;
	DIAS_ATRASO INT;
	COD_C INT;
BEGIN
	SELECT VALOR_PARCELA INTO VALOR_P FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO JOIN CLIENTE CLI ON P.COD_CLIENTE = C.COD WHERE CPF ILIKE CPF_C;
	SELECT EXTRACT(DAY FROM DATA_PAGA - DATA_VENCIMENTO) INTO DIAS_ATRASO FROM CREDIARIO;
	SELECT COD INTO COD_C FROM CREDIARIO C JOIN PEDIDO P ON P.COD = C.COD_PEDIDO JOIN CLIENTE CLI ON P.COD_CLIENTE = C.COD WHERE CPF ILIKE CPF_C;

	--VERIFICAR DATA DO VENCIMENTO, SE PASSAR = JUROS, OS JUROS DEVEM SER COBRADOS NA PROXIMA PARCELA, SE FOR A ULTIMA, O JUROS CAI NELA 
	--VERIFICAR DATA DO PAGAMENTO, SE ESTIVER NULA = PAGAMENTO; SE ESTIVER NOT NULL = EXIBIR MENSAGEM 'PARCELA JÁ PAGA'
	--
	
	IF DIAS_ATRASO > 0 THEN
		JUROS_ATRASO := VALOR_P * 0.005 * DIAS_ATRASO;
	ELSE
		JUROS_ATRASO := 0;
	END IF;

	UPDATE CREDIARIO SET
		DATA_PAGAMENTO = DT_PAG,
		VALOR_PARCELA = VALOR_P + JUROS_ATRASO,
		QUANTIDADE_PARCELA = QUANTIDADE_PARCELA - 1
	WHERE COD = COD_C ;
	
	RAISE INFO 'PARCELA PAGA COM SUCESSO. JUROS POR ATRASO %.', JUROS_ATRASO;
END;
$$ LANGUAGE PLPGSQL;
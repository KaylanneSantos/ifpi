CREATE TABLE CLIENTE(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	CPF VARCHAR(15) NOT NULL UNIQUE,
	CONTATO VARCHAR(20) NOT NULL,
	EMAIL VARCHAR(50) NOT NULL
);

INSERT INTO CLIENTE (NOME, CPF, CONTATO, EMAIL) VALUES 
	('Maria Silva', '123.456.789-10', '(11) 91234-5678', 'maria.silva@gmail.com'),
	('João Oliveira', '987.654.321-00', '(21) 99876-5432', 'joao.oliveira@gmail.com'),
	('Ana Santos', '456.789.123-45', '(31) 98765-4321', 'ana.santos@gmail.com'),
	('Pedro Souza', '654.321.987-00', '(41) 97654-3210', 'pedro.souza@gmail.com'),
	('Mariana Lima', '789.123.456-78', '(51) 96543-2109', 'mariana.lima@gmail.com'),
	('Carlos Pereira', '234.567.890-12', '(61) 95432-1098', 'carlos.pereira@gmail.com'),
	('Juliana Costa', '876.543.210-98', '(71) 94321-0987', 'juliana.costa@gmail.com'),
	('Fernando Oliveira', '345.678.901-23', '(81) 93210-9876', 'fernando.oliveira@gmail.com'),
	('Amanda Rodrigues', '567.890.123-45', '(91) 92109-8765', 'amanda.rodrigues@gmail.com'),
	('Lucas Almeida', '901.234.567-89', '(10) 91087-6543', 'lucas.almeida@gmail.com');

CREATE TABLE CARGO(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	SALARIO NUMERIC(8,2) NOT NULL
);
INSERT INTO CARGO (NOME, SALARIO) VALUES 
	('Gerente', 5000.00),
	('Supervisor', 4000.00),
	('Assistente', 3000.00),
	('Caixa', 2500.00),
	('Estoquista', 2200.00);

CREATE TABLE LOJA(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL
);
INSERT INTO LOJA (NOME) VALUES 
	('Loja 1'),
	('Loja 2'),
	('Loja 3'),
	('Loja 4'),
	('Loja 5'); 

CREATE TABLE FUNCIONARIO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_CARGO INT NOT NULL REFERENCES CARGO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_LOJA INT NOT NULL REFERENCES LOJA(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	NOME VARCHAR(100) NOT NULL,
	CPF VARCHAR(15) NOT NULL UNIQUE,
	CONTATO VARCHAR(20) NOT NULL,
	EMAIL VARCHAR(50) NOT NULL
);
INSERT INTO FUNCIONARIO(COD_CARGO, COD_LOJA, NOME, CPF, CONTATO, EMAIL) VALUES
	(1, 1, 'João Silva', '123.456.789-01', '(11) 91234-5678', 'joao.silva@email.com'),
	(2, 1, 'Maria Santos', '987.654.321-09', '(22) 98765-4321', 'maria.santos@email.com'),
	(3, 2, 'Carlos Oliveira', '222.333.444-55', '(33) 87654-3210', 'carlos.oliveira@email.com'),
	(4, 2, 'Ana Pereira', '555.666.777-99', '(44) 76543-2109', 'ana.pereira@email.com'),
	(5, 3, 'Pedro Rocha', '111.222.333-44', '(55) 65432-1098', 'pedro.rocha@email.com'),
	(1, 3, 'Mariana Costa', '999.888.777-66', '(66) 54321-0987', 'mariana.costa@email.com'),
	(2, 4, 'Lucas Oliveira', '333.222.111-00', '(77) 43210-9876', 'lucas.oliveira@email.com'),
	(3, 4, 'Juliana Pereira', '777.888.999-00', '(88) 32109-8765', 'juliana.pereira@email.com'),
	(4, 5, 'Fernanda Santos', '444.555.666-33', '(99) 21098-7654', 'fernanda.santos@email.com'),
	(5, 5, 'Rafaela Almeida', '666.777.888-11', '(00) 10987-6543', 'rafaela.almeida@email.com');

CREATE TABLE PAGAMENTO(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL
);
INSERT INTO PAGAMENTO (NOME) VALUES 
	('Cartão de Crédito'),
	('Cartão de Débito'),
	('Dinheiro'),
	('Transferência Bancária'),
	('Pix');

CREATE TABLE CATEGORIA(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	DESCRICAO TEXT NOT NULL
);
INSERT INTO CATEGORIA (NOME, DESCRICAO) VALUES 
	('Camisetas', 'Camisetas de diversos estilos e cores'),
	('Calças Jeans', 'Calças jeans masculinas e femininas'),
	('Vestidos', 'Vestidos elegantes para diversas ocasiões'),
	('Sapatos', 'Calçados confortáveis e estilosos'),
	('Acessórios', 'Acessórios variados, como bolsas e cintos');

CREATE TABLE PRODUTO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_CATEGORIA INT NOT NULL REFERENCES CATEGORIA(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	NOME VARCHAR(50) NOT NULL,
	VALOR_UNITARIO NUMERIC(8,2) NOT NULL
);
INSERT INTO PRODUTO (COD_CATEGORIA, NOME, VALOR_UNITARIO) VALUES 
	(1, 'Camiseta Básica', 29.99),
	(1, 'Camiseta Estampada', 39.99),
	(2, 'Calça Jeans Skinny', 89.99),
	(2, 'Calça Jeans Reta', 79.99),
	(3, 'Vestido Midi Floral', 129.99),
	(3, 'Vestido Longo de Festa', 199.99),
	(4, 'Sapato Social Masculino', 149.99),
	(4, 'Sapato Anabela Feminino', 119.99),
	(5, 'Bolsa Transversal', 79.99),
	(5, 'Cinto de Couro', 49.99);

CREATE TABLE ESTOQUE(
	COD SERIAL NOT NULL PRIMARY KEY, 
	COD_PRODUTO INT NOT NULL REFERENCES PRODUTO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_LOJA INT NOT NULL REFERENCES LOJA(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	QUANTIDADE INT NOT NULL
);
INSERT INTO ESTOQUE (COD_PRODUTO, COD_LOJA, QUANTIDADE) VALUES 
	(1, 1, 100),
	(3, 1, 80),
	(6, 1, 80),
	(2, 2, 50),
	(4, 2, 70),
	(8, 2, 70),
	(9, 3, 120),
	(10, 3, 60),
	(5, 3, 60),
	(1, 1, 90);

CREATE TABLE PEDIDO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_CLIENTE INT NOT NULL REFERENCES CLIENTE(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_FUNCIONARIO INT NOT NULL REFERENCES FUNCIONARIO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_PAGAMENTO INT NOT NULL REFERENCES PAGAMENTO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	VALOR_TOTAL NUMERIC(8,2) NOT NULL,
	DATA_HORA TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PAGO BOOLEAN DEFAULT FALSE NOT NULL
);
INSERT INTO PEDIDO (COD_CLIENTE, COD_FUNCIONARIO, COD_PAGAMENTO, VALOR_TOTAL, DATA_HORA, PAGO) VALUES 
	(1, 1, 1, 150.00, CURRENT_TIMESTAMP, TRUE),
	(2, 2, 2, 250.00, CURRENT_TIMESTAMP, TRUE),
	(3, 3, 3, 180.00, CURRENT_TIMESTAMP, TRUE),
	(4, 4, 4, 200.00, CURRENT_TIMESTAMP, FALSE),
	(5, 5, 5, 300.00, CURRENT_TIMESTAMP, FALSE);

CREATE TABLE ITEM_PEDIDO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_PEDIDO INT NOT NULL REFERENCES PEDIDO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_ESTOQUE INT NOT NULL REFERENCES ESTOQUE(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	QUANTIDADE INT NOT NULL,
	VALOR_TOTAL_ITEM NUMERIC(8,2) NOT NULL
);
INSERT INTO ITEM_PEDIDO (COD_PEDIDO, COD_ESTOQUE, QUANTIDADE, VALOR_TOTAL_ITEM) VALUES 
	(1, 1, 2, 50.00),
	(1, 2, 1, 100.00),
	(2, 3, 1, 150.00),
	(3, 4, 2, 120.00),
	(4, 5, 1, 200.00),
	(5, 6, 3, 300.00);


/*	IF ATRIBUTO ~ '^[^a-zA-Z0-9]+$' OR ATRIBUTO !~ '^[0-9]+$' THEN
		RAISE EXCEPTION 'ERROR: VALOR INVÁLIDO %.', ATRIBUTO;
	ELSIF ATRIBUTO = '' OR TRIM(ATRIBUTO) = '' THEN
		RAISE EXCEPTION 'ERROR: ATRIBUTO VÁZIO.';
	END IF;
ATRIBUTO ~ '^[^a-zA-Z0-9]+$' OR
--IF ATRIBUTO ~ '^[^a-zA-Z0-9]+$' OR ATRIBUTO !~ '^[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}$' OR ATRIBUTO !~ '^\([0-9]{2}\) [0-9]{10}' THEN*/

--------------------------------------------EXCEÇÕES---------------------------------------------------------
--CLIENTE FUNCIONARIO

CREATE OR REPLACE FUNCTION VERIFICAR_ATRIBUTOS_INT(ATRIBUTOS VARCHAR[]) -- ALTER FUNCTION NAME TO CHECK_VALUES_INT
RETURNS VOID AS $$ 
DECLARE 
	ATRIBUTO VARCHAR;
BEGIN 
    FOREACH ATRIBUTO IN ARRAY ATRIBUTOS
    LOOP
		IF ATRIBUTO !~ '^[0-9\.\(\)\-]+$' THEN
			RAISE EXCEPTION 'ERROR: VALOR INVÁLIDO %.', ATRIBUTO;
		ELSIF ATRIBUTO = '' OR TRIM(ATRIBUTO) = '' THEN
			RAISE EXCEPTION 'ERROR: ATRIBUTO VÁZIO.';
		END IF;
    END LOOP;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION TRIGGER_VERIFICAR_ATRIBUTOS_INT() -- ALTER FUNCTION NAME TO TRIGGER_CHECK_VALUES
RETURNS TRIGGER AS $$
BEGIN
    PERFORM VERIFICAR_ATRIBUTOS_INT(ARRAY[NEW.CPF, NEW.CONTATO]);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
	
CREATE TRIGGER TRIGGER_ADD_ALTER_CLIENTE -- TRIGGER_ADD_ALTER
BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW 
EXECUTE FUNCTION TRIGGER_VERIFICAR_ATRIBUTOS_INT() -- TRIGGER_CHECK_VALUES

---------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION VERIFICAR_ATRIBUTOS_VARCHAR(ATRIBUTO VARCHAR) -- CHECK_VALUES_VARCHAR
RETURNS VOID AS $$
BEGIN
	IF ATRIBUTO ~ '^[0-9]+$' THEN 
		RAISE EXCEPTION 'ERROR: ATRIBUTO INVÁLIDO: %', ATRIBUTO;
	ELSIF ATRIBUTO = '' OR TRIM(ATRIBUTO) = '' THEN
		RAISE EXCEPTION 'ERROR: ATRIBUTO VAZIO.';
	ELSIF ATRIBUTO ~ '[0-9]' THEN
		RAISE EXCEPTION 'ERROR: ATRIBUTO INVÁLIDO.';
	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION TRIGGER_VERIFICAR_ATRIBUTO() -- TRIGGER_CHECK_VALUES
RETURNS TRIGGER AS $$
BEGIN
    PERFORM VERIFICAR_ATRIBUTOS_VARCHAR(NEW.NOME);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER TRIGGER_INSERT_TABLENAME -- TRIGGER_ADD_ALTER
BEFORE INSERT OR UPDATE ON TABLE_NAME -- ALTER TABLE NAME
FOR EACH ROW
EXECUTE FUNCTION TRIGGER_VERIFICAR_ATRIBUTO(); -- TRIGGER_CHECK_VALUES
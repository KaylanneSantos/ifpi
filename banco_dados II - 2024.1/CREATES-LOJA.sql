CREATE TABLE CLIENTE(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	CPF VARCHAR(15) NOT NULL UNIQUE,
	CONTATO VARCHAR(20) NOT NULL,
	EMAIL VARCHAR(50) NOT NULL
);

INSERT INTO CLIENTE (NOME, CPF, CONTATO, EMAIL) VALUES 
	('Maria Silva', '123.456.789-10', '(11) 91234-5678', 'maria.silva@gmail.com'),
	('João Oliveira', '987.654.321-00', '(21) 99876-5432', 'joao.oliveira@gmail.com'),
	('Ana Santos', '456.789.123-45', '(31) 98765-4321', 'ana.santos@gmail.com'),
	('Pedro Souza', '654.321.987-00', '(41) 97654-3210', 'pedro.souza@gmail.com'),
	('Mariana Lima', '789.123.456-78', '(51) 96543-2109', 'mariana.lima@gmail.com'),
	('Carlos Pereira', '234.567.890-12', '(61) 95432-1098', 'carlos.pereira@gmail.com'),
	('Juliana Costa', '876.543.210-98', '(71) 94321-0987', 'juliana.costa@gmail.com'),
	('Fernando Oliveira', '345.678.901-23', '(81) 93210-9876', 'fernando.oliveira@gmail.com'),
	('Amanda Rodrigues', '567.890.123-45', '(91) 92109-8765', 'amanda.rodrigues@gmail.com'),
	('Lucas Almeida', '901.234.567-89', '(10) 91087-6543', 'lucas.almeida@gmail.com');

CREATE TABLE CARGO(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	SALARIO NUMERIC(8,2) NOT NULL
);
INSERT INTO CARGO (NOME, SALARIO) VALUES 
	('Gerente', 5000.00),
	('Supervisor', 4000.00),
	('Assistente', 3000.00),
	('Caixa', 2500.00),
	('Estoquista', 2200.00);

CREATE TABLE LOJA(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL
);
INSERT INTO LOJA (NOME) VALUES 
	('Loja 1'),
	('Loja 2'),
	('Loja 3'),
	('Loja 4'),
	('Loja 5'); 

CREATE TABLE FUNCIONARIO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_CARGO INT NOT NULL REFERENCES CARGO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_LOJA INT NOT NULL REFERENCES LOJA(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	NOME VARCHAR(100) NOT NULL,
	CPF VARCHAR(15) NOT NULL UNIQUE,
	CONTATO VARCHAR(20) NOT NULL,
	EMAIL VARCHAR(50) NOT NULL
);
INSERT INTO FUNCIONARIO(COD_CARGO, COD_LOJA, NOME, CPF, CONTATO, EMAIL) VALUES
	(1, 1, 'João Silva', '123.456.789-01', '(11) 91234-5678', 'joao.silva@email.com'),
	(2, 1, 'Maria Santos', '987.654.321-09', '(22) 98765-4321', 'maria.santos@email.com'),
	(3, 2, 'Carlos Oliveira', '222.333.444-55', '(33) 87654-3210', 'carlos.oliveira@email.com'),
	(4, 2, 'Ana Pereira', '555.666.777-99', '(44) 76543-2109', 'ana.pereira@email.com'),
	(5, 3, 'Pedro Rocha', '111.222.333-44', '(55) 65432-1098', 'pedro.rocha@email.com'),
	(1, 3, 'Mariana Costa', '999.888.777-66', '(66) 54321-0987', 'mariana.costa@email.com'),
	(2, 4, 'Lucas Oliveira', '333.222.111-00', '(77) 43210-9876', 'lucas.oliveira@email.com'),
	(3, 4, 'Juliana Pereira', '777.888.999-00', '(88) 32109-8765', 'juliana.pereira@email.com'),
	(4, 5, 'Fernanda Santos', '444.555.666-33', '(99) 21098-7654', 'fernanda.santos@email.com'),
	(5, 5, 'Rafaela Almeida', '666.777.888-11', '(00) 10987-6543', 'rafaela.almeida@email.com');

CREATE TABLE PAGAMENTO(
	COD SERIAL NOT NULL PRIMARY KEY,
	TIPO VARCHAR(50) NOT NULL
);
INSERT INTO PAGAMENTO (TIPO) VALUES 
	('Cartão de Crédito'),
	('Cartão de Débito'),
	('Dinheiro'),
	('Transferência Bancária'),
	('Pix');

CREATE TABLE CATEGORIA(
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	DESCRICAO TEXT NOT NULL
);
INSERT INTO CATEGORIA (NOME, DESCRICAO) VALUES 
	('Camisetas', 'Camisetas de diversos estilos e cores'),
	('Calças Jeans', 'Calças jeans masculinas e femininas'),
	('Vestidos', 'Vestidos elegantes para diversas ocasiões'),
	('Sapatos', 'Calçados confortáveis e estilosos'),
	('Acessórios', 'Acessórios variados, como bolsas e cintos');

CREATE TABLE PRODUTO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_CATEGORIA INT NOT NULL REFERENCES CATEGORIA(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	NOME VARCHAR(50) NOT NULL,
	VALOR_UNITARIO NUMERIC(8,2) NOT NULL
);
INSERT INTO PRODUTO (COD_CATEGORIA, NOME, VALOR_UNITARIO) VALUES 
	(1, 'Camiseta Básica', 29.99),
	(1, 'Camiseta Estampada', 39.99),
	(2, 'Calça Jeans Skinny', 89.99),
	(2, 'Calça Jeans Reta', 79.99),
	(3, 'Vestido Midi Floral', 129.99),
	(3, 'Vestido Longo de Festa', 199.99),
	(4, 'Sapato Social Masculino', 149.99),
	(4, 'Sapato Anabela Feminino', 119.99),
	(5, 'Bolsa Transversal', 79.99),
	(5, 'Cinto de Couro', 49.99);

CREATE TABLE ESTOQUE(
	COD SERIAL NOT NULL PRIMARY KEY, 
	COD_PRODUTO INT NOT NULL REFERENCES PRODUTO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_LOJA INT NOT NULL REFERENCES LOJA(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	QUANTIDADE INT NOT NULL
);
INSERT INTO ESTOQUE (COD_PRODUTO, COD_LOJA, QUANTIDADE) VALUES 
	(1, 1, 100),
	(3, 1, 80),
	(6, 1, 80),
	(2, 2, 50),
	(4, 2, 70),
	(8, 2, 70),
	(9, 3, 120),
	(10, 3, 60),
	(5, 3, 60),
	(1, 1, 90),
	(1, 2, 110),
	(2, 3, 150),
	(10, 1, 85);

CREATE TABLE PEDIDO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_CLIENTE INT NOT NULL REFERENCES CLIENTE(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_FUNCIONARIO INT NOT NULL REFERENCES FUNCIONARIO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_PAGAMENTO INT NOT NULL REFERENCES PAGAMENTO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	VALOR_TOTAL NUMERIC(8,2) NOT NULL,
	DATA_HORA TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PAGO BOOLEAN DEFAULT FALSE NOT NULL
);
INSERT INTO PEDIDO (COD_CLIENTE, COD_FUNCIONARIO, COD_PAGAMENTO, VALOR_TOTAL, DATA_HORA, PAGO) VALUES 
	(1, 1, 1, 150.00, CURRENT_TIMESTAMP, TRUE),
	(2, 2, 2, 250.00, CURRENT_TIMESTAMP, TRUE),
	(3, 3, 3, 180.00, CURRENT_TIMESTAMP, TRUE),
	(4, 4, 4, 200.00, CURRENT_TIMESTAMP, FALSE),
	(5, 5, 5, 300.00, CURRENT_TIMESTAMP, FALSE);

CREATE TABLE ITEM_PEDIDO(
	COD SERIAL NOT NULL PRIMARY KEY,
	COD_PEDIDO INT NOT NULL REFERENCES PEDIDO(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	COD_ESTOQUE INT NOT NULL REFERENCES ESTOQUE(COD) 
		ON UPDATE CASCADE 
		ON DELETE RESTRICT,
	QUANTIDADE INT NOT NULL,
	VALOR_TOTAL_ITEM NUMERIC(8,2) NOT NULL
);
INSERT INTO ITEM_PEDIDO (COD_PEDIDO, COD_ESTOQUE, QUANTIDADE, VALOR_TOTAL_ITEM) VALUES 
	(1, 1, 2, 50.00),
	(1, 2, 1, 100.00),
	(2, 3, 1, 150.00),
	(3, 4, 2, 120.00),
	(4, 5, 1, 200.00),
	(5, 6, 3, 300.00);

------------------------------------------------FUNCTIONS UPDATE-----------------------------------------------------
CREATE OR REPLACE FUNCTION UPDATE_CLIENTE(
	COD_C INT, NOME_C VARCHAR(100) DEFAULT NULL,
	CPF_C VARCHAR(15) DEFAULT NULL, 
	CONTATO_C VARCHAR(20) DEFAULT NULL, 
	EMAIL_C VARCHAR(50) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS(SELECT * FROM CLIENTE WHERE COD = COD_C ) THEN
		RAISE EXCEPTION 'O CLIENTE DE CÓDIGO % NÃO EXISTE.', COD_C;
	ELSE
		UPDATE CLIENTE SET
			NOME = COALESCE(NOME_C, NOME),
			CPF = COALESCE(CPF_C, CPF),
			CONTATO = COALESCE(CONTATO_C, CONTATO),
			EMAIL = COALESCE(EMAIL_C, EMAIL)
		WHERE COD = COD_C;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--
SELECT UPDATE_CLIENTE(1, NULL, NULL,'(86) 91234-5678', 'mariadacostasilva@gmail.com')

CREATE OR REPLACE FUNCTION UPDATE_CARGO(
	COD_CAR INT, 
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	SALARIO_C NUMERIC(8,2) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM CARGO WHERE COD = COD_CAR) THEN 
		RAISE EXCEPTION 'O CARGO DE CÓDIGO % NÃO EXISTE.', COD_CAR;
	ELSE 
		UPDATE CARGO SET 
			NOME = COALESCE(NOME_CAR, NOME),
			SALARIO = COALESCE(SALARIO_C, SALARIO)
		WHERE COD = COD_CAR;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--
SELECT UPDATE_CARGO(7, 'Gerente',NULL)
	
CREATE OR REPLACE FUNCTION UPDATE_LOJA(
	COD_L INT,
	NOME_L VARCHAR(50) DEFAULT NULL)
RETURNS VOID AS $$
BEGIN 
	IF NOT EXISTS(SELECT * FROM LOJA WHERE COD = COD_L) THEN
		RAISE EXCEPTION 'A LOJA DE CÓDIGO % NÃO EXISTE.', COD_L;
	ELSE
		UPDATE LOJA SET 
			NOME = COALESCE(NOME_L, NOME)
		WHERE COD = COD_L;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--
SELECT UPDATE_LOJA(9, 'Loja 1')

CREATE OR REPLACE FUNCTION UPDATE_FUNCIONARIO(
	COD_F INT,
	CPF_F VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(50) DEFAULT NULL, 
	NOME_LOJ VARCHAR(50) DEFAULT NULL, 
	NOME_F VARCHAR(50) DEFAULT NULL,  
	CONTATO_F VARCHAR(50) DEFAULT NULL, 
	EMAIL_F VARCHAR(50) DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
	COD_CAR INT; 
	COD_LOJ INT;
BEGIN	
	IF NOT EXISTS(SELECT * FROM FUNCIONARIO WHERE COD = COD_F) THEN
		RAISE EXCEPTION 'O FUNCIONARIO NÃO EXISTE.';
	ELSE
		IF NOME_CAR IS NOT NULL THEN
			SELECT COD_CARGO INTO COD_CAR FROM CARGO WHERE NOME ILIKE NOME_CAR;
	
			IF EXISTS(SELECT * FROM CARGO WHERE COD_CARGO = COD_CAR) THEN
				UPDATE FUNCIONARIO SET COD = COD_CAR WHERE COD_FUNCIONARIO = COD_F;
			ELSE
				RAISE EXCEPTION 'O CARGO % NÃO EXISTE.', NOME_CAR;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD_LOJA INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_LOJ;
	
			IF EXISTS(SELECT * FROM LOJA WHERE COD_LOJA = COD_LOJ) THEN
				UPDATE FUNCIONARIO SET COD = COD_LOJ WHERE COD_FUNCIONARIO = COD_F;
			ELSE
				RAISE EXCEPTION 'A LOJA % NÃO EXISTE.', NOME_LOJ;
			END IF;
		END IF;
	
		IF NOME_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET NOME = NOME_F WHERE COD = COD_F;
		END IF;
	
		IF CPF_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET CPF = CPF_F WHERE COD = COD_F;
		END IF;
	
		IF CONTATO_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET CONTATO = CONTATO_F WHERE COD = COD_F;
		END IF;
	
		IF EMAIL_F IS NOT NULL THEN
			UPDATE FUNCIONARIO SET EMAIL = EMAIL_F WHERE COD = COD_F;
		END IF;

		RAISE EXCEPTION 'POR FAVOR, INSIRA OS DADOS CORRETAMENTE.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--ex:
SELECT UPDATE_FUNCIONARIO(1, NULL,NULL, NULL, NULL, NULL, NULL)

CREATE OR REPLACE FUNCTION UPDATE_CATEGORIA(
	COD_C INT, 
	NOME_C VARCHAR(50) DEFAULT NULL, 
	DESC_C TEXT DEFAULT NULL)
RETURNS VOID AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM CATEGORIA WHERE COD = COD_C) THEN
		RAISE EXCEPTION 'A CATEGORIA NÃO EXISTE.';
	ELSE
		UPDATE CATEGORIA SET 
			NOME = COALESCE(NOME_C, NOME),
			DESCRICAO = COALESCE(DESC_C, DESCRICAO)
		WHERE COD = COD_C;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--
SELECT UPDATE_CATEGORIA(90, 'Camisetas','Camisetas de tamanho P, PP, M, G e GG')
	
CREATE OR REPLACE FUNCTION UPDATE_PRODUTO(
	COD_P INT,
	NOME_P VARCHAR(100) DEFAULT NULL, 
	VALOR_P NUMERIC(8,2) DEFAULT NULL,
	NOME_CAT VARCHAR(100) DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
	COD_CAT INT;
BEGIN 
	IF NOT EXISTS(SELECT * FROM PRODUTO WHERE COD = COD_P) THEN
		RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', NOME_P;
	ELSE 
		IF NOME_P IS NOT NULL OR VALOR_P IS NOT NULL THEN
			UPDATE PRODUTO SET 
				NOME = COALESCE(NOME_P, NOME),
				VALOR_UNITARIO = COALESCE(VALOR_P, VALOR_UNITARIO)
			WHERE COD = COD_P;
		END IF;

		IF NOME_CAT IS NOT NULL THEN
			SELECT COD INTO COD_CAT FROM CATEGORIA WHERE NOME ILIKE NOME_CAT;

			IF EXISTS(SELECT * FROM CATEGORIA WHERE COD = COD_CAT) THEN
				UPDATE PRODUTO SET COD = COD_CAT 
				WHERE COD = COD_P;
			ELSE
				RAISE EXCEPTION 'A CATEGORIA % NÃO EXISTE.',NOME_CAT;
			END IF;
		END IF;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--
SELECT UPDATE_PRODUTO(1,NULL,NULL,'Vestido longos')

CREATE OR REPLACE FUNCTION UPDATE_PAGAMENTO(
	COD_P INT, 
	TIPO_P VARCHAR(50) DEFAULT NULL)
RETURNS VOID AS $$ 
BEGIN 
	IF NOT EXISTS(SELECT * FROM PAGAMENTO WHERE COD = COD_P) THEN
		RAISE EXCEPTION 'O TIPO DE PAGAMENTO NÃO EXISTE.';
	ELSE 
		UPDATE PAGAMENTO SET TIPO = COD = COD_P;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--ex:
SELECT UPDATE_PAGAMENTO(9, 'TED')
	
CREATE OR REPLACE FUNCTION UPDATE_ESTOQUE(
	COD_E INT,
	NOME_PROD VARCHAR(100) DEFAULT NULL, 
	NOME_LOJ VARCHAR(50) DEFAULT NULL, 
	QUANT INT DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
	COD_PROD INT;
	COD_LOJ INT;
BEGIN
	IF NOT EXISTS(SELECT * FROM ESTOQUE WHERE COD = COD_E) THEN 
		RAISE EXCEPTION 'O PRODUTO NÃO EXISTE.';
	ELSE 
		IF QUANT IS NOT NULL THEN
			UPDATE ESTOQUE SET QUANTIDADE = QUANT_P WHERE COD = COD_PROD;
		END IF;
	
		IF NOME_PROD IS NOT NULL THEN
			SELECT COD INTO COD_PROD FROM PRODUTO WHERE NOME ILIKE NOME_PROD;

			IF NOT EXISTS(SELECT * FROM PRODUTO WHERE NOME ILIKE NOME_PROD) THEN
				RAISE EXCEPTION 'O PRODUTO % NÃO EXISTE.', NOME_PROD;
			ELSE 
				UPDATE ESTOQUE SET COD = COD_PROD WHERE COD = COD_E;
			END IF;
		END IF;

		IF NOME_LOJ IS NOT NULL THEN
			SELECT COD INTO COD_LOJ FROM LOJA WHERE NOME ILIKE NOME_LOJ;

			IF NOT EXISTS(SELECT * FROM LOJA WHERE NOME ILIKE NOME_LOJ) THEN 
				RAISE EXCEPTION 'A LOJA % NÃO EXISTE.', NOME_LOJ;
			ELSE
				UPDATE ESTOQUE SET COD = COD_LOJ WHERE COD = COD_E;
			END IF;
		END IF;

		RAISE EXCEPTION 'POR FAVOR, INSIRA OS DADOS CORRETAMENTE.';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
--ex:
SELECT UPDATE_ESTOQUE(1,'Camiseta básica', NULL, NULL)
